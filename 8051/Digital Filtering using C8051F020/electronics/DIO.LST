C51 COMPILER V9.60.0.0   DIO                                                               06/04/2020 15:32:23 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DIO
OBJECT MODULE PLACED IN DIO.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE DIO.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1            
   2          
   3          #include <c8051f020.h>
   4          #include "std_macros.h"
   5          #include "DIO.h"
   6          
   7          
   8          void DIO_setPin_OutPutMode(unsigned char portnumber,unsigned char pinnumber,unsigned char direction)
   9          {
  10   1          switch(portnumber)
  11   1        {
  12   2            case 0:
  13   2            if(direction==1)
  14   2            {
  15   3              SET_BIT(P0MDOUT,pinnumber);//Set the output mode of port0 to Push-Pull mode
  16   3            }
  17   2            else
  18   2            {
  19   3              CLR_BIT(P0MDOUT,pinnumber);//Set the output mode of port0 to Open-Drain mode
  20   3            }
  21   2            break;
  22   2      
  23   2          case 1:
  24   2            if(direction==1)
  25   2            {
  26   3              SET_BIT(P1MDOUT,pinnumber);//Set the output mode of port0 to Push-Pull mode
  27   3            }
  28   2            else
  29   2            {
  30   3              CLR_BIT(P1MDOUT,pinnumber);//Set the output mode of port0 to Open-Drain mode
  31   3            }
  32   2            break;
  33   2      
  34   2          case 2:
  35   2            if(direction==1)
  36   2            {
  37   3              SET_BIT(P2MDOUT,pinnumber);//Set the output mode of port0 to Push-Pull mode
  38   3            }
  39   2            else
  40   2            {
  41   3              CLR_BIT(P2MDOUT,pinnumber);//Set the output mode of port0 to Open-Drain mode
  42   3            }
  43   2            break;
  44   2            
  45   2          case 3:
  46   2            if(direction==1)
  47   2            {
  48   3              SET_BIT(P3MDOUT,pinnumber);//Set the output mode of port0 to Push-Pull mode
  49   3            }
  50   2            else
  51   2            {
  52   3              CLR_BIT(P3MDOUT,pinnumber);//Set the output mode of port0 to Open-Drain mode
  53   3            }
  54   2            break;
  55   2          default: 
C51 COMPILER V9.60.0.0   DIO                                                               06/04/2020 15:32:23 PAGE 2   

  56   2          break;
  57   2      
  58   2      }
  59   1        }
  60          
  61          void DIO_pinWrite(unsigned char portnumber,unsigned char pinnumber,unsigned char outputvalue)
  62          {
  63   1        switch(portnumber)
  64   1        {
  65   2          case 0:
  66   2            if(outputvalue==1)
  67   2            {
  68   3              SET_BIT(P0,pinnumber);//Set the value of the given pin in port0 as High
  69   3            }
  70   2            else
  71   2            {
  72   3              CLR_BIT(P0,pinnumber);//Set the value of the given pin in port0 as Low
  73   3            }
  74   2            break ;
  75   2          
  76   2          case 1:
  77   2            if(outputvalue==1)
  78   2            {
  79   3              SET_BIT(P1,pinnumber);//Set the value of the given pin in port1 as High
  80   3            }
  81   2            else
  82   2            {
  83   3              CLR_BIT(P1,pinnumber);//Set the value of the given pin in port1 as Low
  84   3            }
  85   2            break ;
  86   2          
  87   2          case 2 :    
  88   2            if(outputvalue==1)
  89   2            {
  90   3              SET_BIT(P2,pinnumber);//Set the value of the given pin in port2 as High
  91   3            }
  92   2            else
  93   2            {
  94   3              CLR_BIT(P2,pinnumber);//Set the value of the given pin in port2 as Low
  95   3            }
  96   2            break ;
  97   2          
  98   2          case 3:
  99   2            if(outputvalue==1)
 100   2            {
 101   3              SET_BIT(P3,pinnumber);//Set the value of the given pin in port3 as High
 102   3            }
 103   2            else
 104   2            {
 105   3              CLR_BIT(P3,pinnumber);//Set the value of the given pin in port3 as Low
 106   3            }
 107   2            break ;
 108   2          default: break ;
 109   2        }
 110   1      }
 111          
 112          void DIO_setPinInput(unsigned char portnumber,unsigned char pinnumber,unsigned char direction)
 113          {
 114   1        switch(portnumber)
 115   1          {
 116   2          case 0:
 117   2            // make the pin as input pin
C51 COMPILER V9.60.0.0   DIO                                                               06/04/2020 15:32:23 PAGE 3   

 118   2            CLR_BIT(P0MDOUT,pinnumber);//Set the output mode of pinNumber of port0 to Open-Drain mode
 119   2            SET_BIT(P0,pinnumber); //Set the value of the given pin in port0 as High
 120   2            break;
 121   2      
 122   2          case 1: 
 123   2            // make the pin as input pin
 124   2            CLR_BIT(P1MDOUT,pinnumber);//Set the output mode of pinNumber of port1 to Open-Drain mode
 125   2            SET_BIT(P1,pinnumber); //Set the value of the given pin in port1 as High
 126   2            if(direction==1)
 127   2            {
 128   3              SET_BIT(P1MDIN,pinnumber); //Pin is configured in Analog Input mode.
 129   3            }
 130   2            else
 131   2            {
 132   3               CLR_BIT(P1MDIN,pinnumber); //Pin is configured in Analog Input mode.
 133   3            }
 134   2            break;
 135   2          case 2:
 136   2            // make the pin as input pin
 137   2            CLR_BIT(P2MDOUT,pinnumber);//Set the output mode of pinNumber of port2 to Open-Drain mode
 138   2            SET_BIT(P2,pinnumber); //Set the value of the given pin in port2 as High
 139   2            break;
 140   2            
 141   2          case 3:
 142   2            // make the pin as input pin
 143   2            CLR_BIT(P3MDOUT,pinnumber);//Set the output mode of pinNumber of port3 to Open-Drain mode
 144   2            SET_BIT(P3,pinnumber); //Set the value of the given pin in port3 as High
 145   2            break;
 146   2          
 147   2        }
 148   1        
 149   1      }
 150          
 151          
 152          unsigned char DIO_pinRead(unsigned char portnumber,unsigned char pinnumber)
 153          {
 154   1        unsigned char return_value=0;
 155   1        switch(portnumber)
 156   1        {
 157   2          case 0 :
 158   2          return_value=READ_BIT(P0,pinnumber);//Read the value from the given pin in port A
 159   2          break;
 160   2          
 161   2          case 1 :
 162   2          return_value=READ_BIT(P1,pinnumber);//Read the value from the given pin in port B
 163   2          break;
 164   2          
 165   2          case 2:
 166   2          return_value=READ_BIT(P2,pinnumber);//Read the value from the given pin in port C
 167   2          break;
 168   2          
 169   2          case 3 :
 170   2          return_value=READ_BIT(P3,pinnumber);//Read the value from the given pin in port D
 171   2          break;
 172   2          default: 
 173   2          break;
 174   2        }
 175   1        return return_value ;
 176   1      }
 177          
 178          
 179          
C51 COMPILER V9.60.0.0   DIO                                                               06/04/2020 15:32:23 PAGE 4   

 180          
 181          void write_low_nibble(unsigned char portnumber,unsigned char value)
 182          {
 183   1        value&=0x0f;
 184   1        switch(portnumber)
 185   1        {
 186   2          case 0:
 187   2          P0 &=0xf0;
 188   2          P0|=value;
 189   2          break;
 190   2          
 191   2          case 1:
 192   2          P1 &=0xf0;
 193   2          P1|=value;
 194   2          break;
 195   2          
 196   2          case 2:
 197   2          P2 &=0xf0;
 198   2          P2 |=value;
 199   2          break;
 200   2          
 201   2          case 3:
 202   2          P3 &=0xf0;
 203   2          P3 |=value;
 204   2          break;
 205   2        }
 206   1      }
 207          
 208          void write_high_nibble(unsigned char portnumber,unsigned char value)
 209          {
 210   1        value<<=4;
 211   1        switch(portnumber)
 212   1        {
 213   2          case 0:
 214   2          P0 &=0x0f;
 215   2          P0 |=value;
 216   2          break;
 217   2          
 218   2          case 1:
 219   2          P1 &=0x0f;
 220   2          P1 |=value;
 221   2          break;
 222   2          
 223   2          case 2:
 224   2          P2 &=0x0f;
 225   2          P2 |=value;
 226   2          break;
 227   2          
 228   2          case 3:
 229   2          P3 &=0x0f;
 230   2          P3 |=value;
 231   2          break;
 232   2        }
 233   1      }
 234          
 235          void DIO_setPort_OutPutMode(unsigned char portnumber,unsigned char direction)
 236          {
 237   1        switch(portnumber)
 238   1        {
 239   2          case 0:
 240   2          if(direction==1)
 241   2          {
C51 COMPILER V9.60.0.0   DIO                                                               06/04/2020 15:32:23 PAGE 5   

 242   3            P0MDOUT |= 0xff;//Set the output mode of port0 to Push-Pull mode
 243   3          }
 244   2          else
 245   2          {
 246   3            P0MDOUT &= 0x00;//Set the output mode of port0 to Open-Drain mode
 247   3          }
 248   2          break;
 249   2          case 1:
 250   2          if(direction==1)
 251   2          {
 252   3            P1MDOUT |= 0xff;//Set the output mode of port1 to Push-Pull mode
 253   3          }
 254   2          else
 255   2          {
 256   3            P1MDOUT &= 0x00;//Set the output mode of port1 to Open-Drain mode
 257   3          }
 258   2          break;
 259   2          case 2:
 260   2          if(direction==1)
 261   2          {
 262   3            P2MDOUT |= 0xff;//Set the output mode of port2 to Push-Pull mode
 263   3          }
 264   2          else
 265   2          {
 266   3            P2MDOUT &= 0x00;//Set the output mode of port2 to Open-Drain mode
 267   3          }
 268   2          break;
 269   2          case 3:
 270   2          if(direction==1)
 271   2          {
 272   3            P3MDOUT |= 0xff;//Set the output mode of port3 to Push-Pull mode
 273   3          }
 274   2          else
 275   2          {
 276   3            P3MDOUT &= 0x00;//Set the output mode of port3 to Open-Drain mode
 277   3          }
 278   2          break;
 279   2          default: 
 280   2          break;
 281   2        }
 282   1        
 283   1      }
 284          
 285          void DIO_setPortInput(unsigned char portnumber)
 286          {
 287   1        switch(portnumber)
 288   1          {
 289   2          case 0:
 290   2            // make the pin as input pin
 291   2            DIO_setPort_OutPutMode(0,0);//Set the output mode of pinNumber of port0 to Open-Drain mode
 292   2            DIO_write_port(0,0xff); //Set the value of the given pin in port0 as High
 293   2            break;
 294   2      
 295   2          case 1: 
 296   2            // make the pin as input pin
 297   2            DIO_setPort_OutPutMode(1,0);//Set the output mode of pinNumber of port1 to Open-Drain mode
 298   2            DIO_write_port(1,0xff); //Set the value of the given pin in port1 as High
 299   2            break;
 300   2          case 2:
 301   2            // make the pin as input pin
 302   2            DIO_setPort_OutPutMode(2,0);//Set the output mode of pinNumber of port2 to Open-Drain mode
 303   2            DIO_write_port(2,0xff); //Set the value of the given pin in port2 as High
C51 COMPILER V9.60.0.0   DIO                                                               06/04/2020 15:32:23 PAGE 6   

 304   2            break;
 305   2            
 306   2          case 3:
 307   2            // make the pin as input pin
 308   2            DIO_setPort_OutPutMode(3,0);//Set the output mode of pinNumber of port3 to Open-Drain mode
 309   2            DIO_write_port(0,0xff); //Set the value of the given pin in port3 as High
 310   2            break;
 311   2          
 312   2        }
 313   1        
 314   1      }
 315          
 316          
 317          unsigned char DIO_read_port(unsigned char portnumber)
 318          {
 319   1        unsigned char return_val=0;
 320   1        switch(portnumber)
 321   1        {
 322   2          case 0 :
 323   2          return_val=P0; // read the value of port A 
 324   2          break ;
 325   2          case 1:
 326   2          return_val=P1; // read the value of port B 
 327   2          break ;
 328   2          case 2 :
 329   2          return_val=P2; // read the value of port C 
 330   2          break ;
 331   2          case 3:
 332   2          return_val=P3; // read the value of port D 
 333   2          break ;
 334   2          default:
 335   2          break ;
 336   2        }
 337   1        return return_val;
 338   1      }
 339          
 340          void DIO_write_port(unsigned char portnumber,unsigned char portvalue)
 341          {
 342   1        switch(portnumber)
 343   1        {
 344   2          case 0 :
 345   2            P0 = portvalue; //Write the given value to the port A
 346   2            break ;
 347   2          
 348   2          case 1:
 349   2            P1 = portvalue; //Write the given value to the port B
 350   2            break ;
 351   2          
 352   2          case 2 :
 353   2            P2 = portvalue; //Write the given value to the port C
 354   2            break ;
 355   2          
 356   2          case 3:
 357   2            P3 = portvalue; //Write the given value to the port D
 358   2            break ;
 359   2          
 360   2          default:
 361   2           break ;
 362   2        }
 363   1      }
 364          
 365          
C51 COMPILER V9.60.0.0   DIO                                                               06/04/2020 15:32:23 PAGE 7   

 366          
 367          void DIO_toggle(unsigned char portnumber,unsigned char pinnumber)
 368          {
 369   1        switch(portnumber)
 370   1        {
 371   2          case 0:
 372   2            TOG_BIT(P0,pinnumber);//Toggle the value of the given pin in port A
 373   2            break;
 374   2          
 375   2          case 1:
 376   2            TOG_BIT(P1,pinnumber);//Toggle the value of the given pin in port B
 377   2            break;
 378   2          
 379   2          case 2:
 380   2            TOG_BIT(P2,pinnumber);//Toggle the value of the given pin in port C
 381   2            break;
 382   2          
 383   2          case 3:
 384   2            TOG_BIT(P3,pinnumber);//Toggle the value of the given pin in port D
 385   2            break;
 386   2          
 387   2          default: break;
 388   2        }
 389   1      }
 390          
 391          
 392          
 393          void delay_ms(unsigned int k)
 394          {
 395   1        unsigned int i,j;
 396   1           for(i=0;i<=k;i++)
 397   1            for(j=0;j<110;j++);
 398   1      }
 399          
 400          void interrupt_enable(void)
 401          {
 402   1          SET_BIT(IE,7);
 403   1      }
 404          
 405          void interrupt_0Enable(void)
 406          {
 407   1        SET_BIT(IE,0);
 408   1        SET_BIT(TCON,0);
 409   1      }
 410          void interrupt_1Enable(void)
 411          {
 412   1        SET_BIT(IE,2);
 413   1        SET_BIT(TCON,2);
 414   1      }
 415          
 416          
 417          void initTimer1(void)
 418          {
 419   1        
 420   1          SET_BIT(TMOD,4);       //Timer1 mode 1 
 421   1          TH1 = 0X00;        //Load the timer value
 422   1          TL1 = 0X00;
 423   1          TR1 = 1;           //turn ON Timer one
 424   1          ET1 = 1;           //Enable TImer1 Interrupt
 425   1          EA = 1;            //Enable Global Interrupt 
 426   1      }
 427          
C51 COMPILER V9.60.0.0   DIO                                                               06/04/2020 15:32:23 PAGE 8   

 428          void initTimer0(void)
 429          {
 430   1          CKCON |= 0x04; //T0M = 1; Timer 0 uses SysClock
 431   1      
 432   1          SET_BIT(TMOD,1);       //Timer0 mode 1 
 433   1          TH0 = 0XFD;        //Load the timer value
 434   1          TL0 = 0XFD;
 435   1          TR0 = 1;           //turn ON Timer zero
 436   1          ET0 = 1;           //Enable TImer0 Interrupt
 437   1          EA = 1;            //Enable Global Interrupt 
 438   1        
 439   1      
 440   1      }
 441          
 442          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1036    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
