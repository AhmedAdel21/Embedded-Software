
mainProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  000012da  0000136e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  008000c4  008000c4  000013d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002860  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f4b  00000000  00000000  00003ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014d6  00000000  00000000  00004e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  000062e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091e  00000000  00000000  00006738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001430  00000000  00000000  00007056  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00008486  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 b8 03 	jmp	0x770	; 0x770 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 ec       	ldi	r26, 0xC4	; 196
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3d       	cpi	r26, 0xD0	; 208
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 31 04 	call	0x862	; 0x862 <main>
      8a:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keypad_vInit>:
#include <util/delay.h>
#include "keypad_driver.h"
#include "LCD_service.h"
 void keypad_vInit()
 {
	 DIO_vsetPINDir(PORT_D,0,1);
      92:	41 e0       	ldi	r20, 0x01	; 1
      94:	60 e0       	ldi	r22, 0x00	; 0
      96:	83 e0       	ldi	r24, 0x03	; 3
      98:	0e 94 13 06 	call	0xc26	; 0xc26 <DIO_vsetPINDir>
	 DIO_vsetPINDir(PORT_D,1,1);
      9c:	41 e0       	ldi	r20, 0x01	; 1
      9e:	61 e0       	ldi	r22, 0x01	; 1
      a0:	83 e0       	ldi	r24, 0x03	; 3
      a2:	0e 94 13 06 	call	0xc26	; 0xc26 <DIO_vsetPINDir>
	 DIO_vsetPINDir(PORT_D,2,1);
      a6:	41 e0       	ldi	r20, 0x01	; 1
      a8:	62 e0       	ldi	r22, 0x02	; 2
      aa:	83 e0       	ldi	r24, 0x03	; 3
      ac:	0e 94 13 06 	call	0xc26	; 0xc26 <DIO_vsetPINDir>
	 DIO_vsetPINDir(PORT_D,3,1);
      b0:	41 e0       	ldi	r20, 0x01	; 1
      b2:	63 e0       	ldi	r22, 0x03	; 3
      b4:	83 e0       	ldi	r24, 0x03	; 3
      b6:	0e 94 13 06 	call	0xc26	; 0xc26 <DIO_vsetPINDir>
	 DIO_vsetPINDir(PORT_D,5,0);
      ba:	40 e0       	ldi	r20, 0x00	; 0
      bc:	65 e0       	ldi	r22, 0x05	; 5
      be:	83 e0       	ldi	r24, 0x03	; 3
      c0:	0e 94 13 06 	call	0xc26	; 0xc26 <DIO_vsetPINDir>
	 DIO_vsetPINDir(PORT_D,6,0);
      c4:	40 e0       	ldi	r20, 0x00	; 0
      c6:	66 e0       	ldi	r22, 0x06	; 6
      c8:	83 e0       	ldi	r24, 0x03	; 3
      ca:	0e 94 13 06 	call	0xc26	; 0xc26 <DIO_vsetPINDir>
	 DIO_vsetPINDir(PORT_D,7,0);
      ce:	40 e0       	ldi	r20, 0x00	; 0
      d0:	67 e0       	ldi	r22, 0x07	; 7
      d2:	83 e0       	ldi	r24, 0x03	; 3
      d4:	0e 94 13 06 	call	0xc26	; 0xc26 <DIO_vsetPINDir>
	 DIO_vconnectpullup(PORT_D,5,1);
      d8:	41 e0       	ldi	r20, 0x01	; 1
      da:	65 e0       	ldi	r22, 0x05	; 5
      dc:	83 e0       	ldi	r24, 0x03	; 3
      de:	0e 94 78 06 	call	0xcf0	; 0xcf0 <DIO_vconnectpullup>
	 DIO_vconnectpullup(PORT_D,6,1);
      e2:	41 e0       	ldi	r20, 0x01	; 1
      e4:	66 e0       	ldi	r22, 0x06	; 6
      e6:	83 e0       	ldi	r24, 0x03	; 3
      e8:	0e 94 78 06 	call	0xcf0	; 0xcf0 <DIO_vconnectpullup>
	 DIO_vconnectpullup(PORT_D,7,1);
      ec:	41 e0       	ldi	r20, 0x01	; 1
      ee:	67 e0       	ldi	r22, 0x07	; 7
      f0:	83 e0       	ldi	r24, 0x03	; 3
      f2:	0e 94 78 06 	call	0xcf0	; 0xcf0 <DIO_vconnectpullup>
      f6:	08 95       	ret

000000f8 <keypad_u8check_press>:

 }
 char keypad_u8check_press()
 {
      f8:	ef 92       	push	r14
      fa:	ff 92       	push	r15
      fc:	0f 93       	push	r16
      fe:	1f 93       	push	r17
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	cd b7       	in	r28, 0x3d	; 61
     106:	de b7       	in	r29, 0x3e	; 62
     108:	2c 97       	sbiw	r28, 0x0c	; 12
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	f8 94       	cli
     10e:	de bf       	out	0x3e, r29	; 62
     110:	0f be       	out	0x3f, r0	; 63
     112:	cd bf       	out	0x3d, r28	; 61
	 char arr[4][3]={{'7','8','9'},{'4','5','6'},{'1','2','3'},{'*','0','#'}};
     114:	8c e0       	ldi	r24, 0x0C	; 12
     116:	e5 e6       	ldi	r30, 0x65	; 101
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	de 01       	movw	r26, r28
     11c:	11 96       	adiw	r26, 0x01	; 1
     11e:	01 90       	ld	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	8a 95       	dec	r24
     124:	e1 f7       	brne	.-8      	; 0x11e <keypad_u8check_press+0x26>
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
     126:	0f 2e       	mov	r0, r31
     128:	f8 ec       	ldi	r31, 0xC8	; 200
     12a:	ef 2e       	mov	r14, r31
     12c:	f0 2d       	mov	r31, r0
	 for(row=0;row<4;row++)
     12e:	f1 2c       	mov	r15, r1
     130:	3a c0       	rjmp	.+116    	; 0x1a6 <keypad_u8check_press+0xae>
	 {
		DIO_write(PORT_D,0,1);
     132:	41 e0       	ldi	r20, 0x01	; 1
     134:	60 e0       	ldi	r22, 0x00	; 0
     136:	83 e0       	ldi	r24, 0x03	; 3
     138:	0e 94 38 06 	call	0xc70	; 0xc70 <DIO_write>
		DIO_write(PORT_D,1,1);
     13c:	41 e0       	ldi	r20, 0x01	; 1
     13e:	61 e0       	ldi	r22, 0x01	; 1
     140:	83 e0       	ldi	r24, 0x03	; 3
     142:	0e 94 38 06 	call	0xc70	; 0xc70 <DIO_write>
		DIO_write(PORT_D,2,1);
     146:	41 e0       	ldi	r20, 0x01	; 1
     148:	62 e0       	ldi	r22, 0x02	; 2
     14a:	83 e0       	ldi	r24, 0x03	; 3
     14c:	0e 94 38 06 	call	0xc70	; 0xc70 <DIO_write>
		DIO_write(PORT_D,3,1);
     150:	41 e0       	ldi	r20, 0x01	; 1
     152:	63 e0       	ldi	r22, 0x03	; 3
     154:	83 e0       	ldi	r24, 0x03	; 3
     156:	0e 94 38 06 	call	0xc70	; 0xc70 <DIO_write>
		DIO_write(PORT_D,row,0);
     15a:	40 e0       	ldi	r20, 0x00	; 0
     15c:	6f 2d       	mov	r22, r15
     15e:	83 e0       	ldi	r24, 0x03	; 3
     160:	0e 94 38 06 	call	0xc70	; 0xc70 <DIO_write>

		for(coloumn=0;coloumn<3;coloumn++)
     164:	10 e0       	ldi	r17, 0x00	; 0
     166:	1a c0       	rjmp	.+52     	; 0x19c <keypad_u8check_press+0xa4>
		{
			x=DIO_u8read(PORT_D,(coloumn+5));
     168:	65 e0       	ldi	r22, 0x05	; 5
     16a:	61 0f       	add	r22, r17
     16c:	83 e0       	ldi	r24, 0x03	; 3
     16e:	0e 94 5d 06 	call	0xcba	; 0xcba <DIO_u8read>
     172:	08 2f       	mov	r16, r24
			if(x==0)
     174:	81 11       	cpse	r24, r1
     176:	11 c0       	rjmp	.+34     	; 0x19a <keypad_u8check_press+0xa2>
			 {
				 returnval=arr[row][coloumn];
     178:	8f 2d       	mov	r24, r15
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	fc 01       	movw	r30, r24
     17e:	ee 0f       	add	r30, r30
     180:	ff 1f       	adc	r31, r31
     182:	e8 0f       	add	r30, r24
     184:	f9 1f       	adc	r31, r25
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	8c 0f       	add	r24, r28
     18c:	9d 1f       	adc	r25, r29
     18e:	e8 0f       	add	r30, r24
     190:	f9 1f       	adc	r31, r25
     192:	e1 0f       	add	r30, r17
     194:	f1 1d       	adc	r31, r1
     196:	e0 80       	ld	r14, Z
				 break;
     198:	03 c0       	rjmp	.+6      	; 0x1a0 <keypad_u8check_press+0xa8>
		DIO_write(PORT_D,1,1);
		DIO_write(PORT_D,2,1);
		DIO_write(PORT_D,3,1);
		DIO_write(PORT_D,row,0);

		for(coloumn=0;coloumn<3;coloumn++)
     19a:	1f 5f       	subi	r17, 0xFF	; 255
     19c:	13 30       	cpi	r17, 0x03	; 3
     19e:	20 f3       	brcs	.-56     	; 0x168 <keypad_u8check_press+0x70>
			 {
				 returnval=arr[row][coloumn];
				 break;
			 }
		}
		if(x==0)
     1a0:	00 23       	and	r16, r16
     1a2:	21 f0       	breq	.+8      	; 0x1ac <keypad_u8check_press+0xb4>
 char keypad_u8check_press()
 {
	 char arr[4][3]={{'7','8','9'},{'4','5','6'},{'1','2','3'},{'*','0','#'}};
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
     1a4:	f3 94       	inc	r15
     1a6:	93 e0       	ldi	r25, 0x03	; 3
     1a8:	9f 15       	cp	r25, r15
     1aa:	18 f6       	brcc	.-122    	; 0x132 <keypad_u8check_press+0x3a>
			break;
		}
	}

	 return returnval ;
 }
     1ac:	8e 2d       	mov	r24, r14
     1ae:	2c 96       	adiw	r28, 0x0c	; 12
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	f8 94       	cli
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	0f be       	out	0x3f, r0	; 63
     1b8:	cd bf       	out	0x3d, r28	; 61
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	1f 91       	pop	r17
     1c0:	0f 91       	pop	r16
     1c2:	ff 90       	pop	r15
     1c4:	ef 90       	pop	r14
     1c6:	08 95       	ret

000001c8 <keypadValue>:

extern int8_t KeypadInput[2];
extern uint8_t arrayIndex;
extern uint8_t clearUnUsedTempFlag;
uint8_t keypadValue(void){
	uint8_t keypadTempValue = keypad_u8check_press();
     1c8:	0e 94 7c 00 	call	0xf8	; 0xf8 <keypad_u8check_press>
	static int8_t keypadValue = 0;
	uint8_t keypadFinalValue = keypadNotPressed;
	clearUnUsedTempFlag = 1;
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <clearUnUsedTempFlag>
	if (keypadTempValue != NOTPRESSED)
     1d2:	88 3c       	cpi	r24, 0xC8	; 200
     1d4:	d1 f1       	breq	.+116    	; 0x24a <keypadValue+0x82>
	{
		if (keypadTempValue == '*')
     1d6:	8a 32       	cpi	r24, 0x2A	; 42
     1d8:	39 f4       	brne	.+14     	; 0x1e8 <keypadValue+0x20>
		{
			if (keypadValue!=0)
     1da:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
     1de:	88 23       	and	r24, r24
     1e0:	b1 f1       	breq	.+108    	; 0x24e <keypadValue+0x86>
			{keypadFinalValue = (uint8_t)keypadValue;
			keypadValue=0;}
     1e2:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__data_end>
     1e6:	08 95       	ret
			else{}
			
		}
		else if(keypadTempValue == '#'){
     1e8:	83 32       	cpi	r24, 0x23	; 35
     1ea:	99 f1       	breq	.+102    	; 0x252 <keypadValue+0x8a>
			keypadFinalValue = KeypadStandBy;
		}
		else
		{
			if (arrayIndex == 2)
     1ec:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <arrayIndex>
     1f0:	92 30       	cpi	r25, 0x02	; 2
     1f2:	69 f4       	brne	.+26     	; 0x20e <keypadValue+0x46>
     1f4:	07 c0       	rjmp	.+14     	; 0x204 <keypadValue+0x3c>
			{
				for(uint8_t loop=0;loop<2;loop++){
					KeypadInput[loop]=0;
     1f6:	e9 2f       	mov	r30, r25
     1f8:	f0 e0       	ldi	r31, 0x00	; 0
     1fa:	e7 53       	subi	r30, 0x37	; 55
     1fc:	ff 4f       	sbci	r31, 0xFF	; 255
     1fe:	10 82       	st	Z, r1
		}
		else
		{
			if (arrayIndex == 2)
			{
				for(uint8_t loop=0;loop<2;loop++){
     200:	9f 5f       	subi	r25, 0xFF	; 255
     202:	01 c0       	rjmp	.+2      	; 0x206 <keypadValue+0x3e>
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	92 30       	cpi	r25, 0x02	; 2
     208:	b0 f3       	brcs	.-20     	; 0x1f6 <keypadValue+0x2e>
					KeypadInput[loop]=0;
				}
				arrayIndex = 0;
     20a:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <arrayIndex>
				}else{}
				KeypadInput[arrayIndex] = keypadTempValue;
     20e:	e0 91 c8 00 	lds	r30, 0x00C8	; 0x8000c8 <arrayIndex>
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	e7 53       	subi	r30, 0x37	; 55
     216:	ff 4f       	sbci	r31, 0xFF	; 255
     218:	80 83       	st	Z, r24
				keypadValue = atoi((char *)KeypadInput);
     21a:	89 ec       	ldi	r24, 0xC9	; 201
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 07 09 	call	0x120e	; 0x120e <atoi>
     222:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__data_end>
				LCD_SetSetTemp((uint8_t)keypadValue);
     226:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <LCD_SetSetTemp>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22a:	2f ef       	ldi	r18, 0xFF	; 255
     22c:	83 ec       	ldi	r24, 0xC3	; 195
     22e:	99 e0       	ldi	r25, 0x09	; 9
     230:	21 50       	subi	r18, 0x01	; 1
     232:	80 40       	sbci	r24, 0x00	; 0
     234:	90 40       	sbci	r25, 0x00	; 0
     236:	e1 f7       	brne	.-8      	; 0x230 <keypadValue+0x68>
     238:	00 c0       	rjmp	.+0      	; 0x23a <keypadValue+0x72>
     23a:	00 00       	nop
				_delay_ms(400);
				arrayIndex++;
     23c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <arrayIndex>
     240:	8f 5f       	subi	r24, 0xFF	; 255
     242:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <arrayIndex>
extern uint8_t arrayIndex;
extern uint8_t clearUnUsedTempFlag;
uint8_t keypadValue(void){
	uint8_t keypadTempValue = keypad_u8check_press();
	static int8_t keypadValue = 0;
	uint8_t keypadFinalValue = keypadNotPressed;
     246:	8a ef       	ldi	r24, 0xFA	; 250
     248:	08 95       	ret
     24a:	8a ef       	ldi	r24, 0xFA	; 250
     24c:	08 95       	ret
     24e:	8a ef       	ldi	r24, 0xFA	; 250
     250:	08 95       	ret
			keypadValue=0;}
			else{}
			
		}
		else if(keypadTempValue == '#'){
			keypadFinalValue = KeypadStandBy;
     252:	80 ef       	ldi	r24, 0xF0	; 240
			}
		}
		else{}
		return keypadFinalValue;
		
	}
     254:	08 95       	ret

00000256 <send_falling_edge>:
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	eb e7       	ldi	r30, 0x7B	; 123
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	d1 81       	ldd	r29, Z+1	; 0x01
     260:	c0 81       	ld	r28, Z
     262:	41 e0       	ldi	r20, 0x01	; 1
     264:	6d 2f       	mov	r22, r29
     266:	8c 2f       	mov	r24, r28
     268:	0e 94 38 06 	call	0xc70	; 0xc70 <DIO_write>
     26c:	8f e9       	ldi	r24, 0x9F	; 159
     26e:	9f e0       	ldi	r25, 0x0F	; 15
     270:	01 97       	sbiw	r24, 0x01	; 1
     272:	f1 f7       	brne	.-4      	; 0x270 <send_falling_edge+0x1a>
     274:	00 c0       	rjmp	.+0      	; 0x276 <send_falling_edge+0x20>
     276:	00 00       	nop
     278:	40 e0       	ldi	r20, 0x00	; 0
     27a:	6d 2f       	mov	r22, r29
     27c:	8c 2f       	mov	r24, r28
     27e:	0e 94 38 06 	call	0xc70	; 0xc70 <DIO_write>
     282:	8f e9       	ldi	r24, 0x9F	; 159
     284:	9f e0       	ldi	r25, 0x0F	; 15
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <send_falling_edge+0x30>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <send_falling_edge+0x36>
     28c:	00 00       	nop
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <LCD_vSend_cmd>:
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	18 2f       	mov	r17, r24
     29c:	68 2f       	mov	r22, r24
     29e:	62 95       	swap	r22
     2a0:	6f 70       	andi	r22, 0x0F	; 15
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <write_high_nibble>
     2a8:	eb e7       	ldi	r30, 0x7B	; 123
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	d3 81       	ldd	r29, Z+3	; 0x03
     2ae:	c2 81       	ldd	r28, Z+2	; 0x02
     2b0:	40 e0       	ldi	r20, 0x00	; 0
     2b2:	6d 2f       	mov	r22, r29
     2b4:	8c 2f       	mov	r24, r28
     2b6:	0e 94 38 06 	call	0xc70	; 0xc70 <DIO_write>
     2ba:	0e 94 2b 01 	call	0x256	; 0x256 <send_falling_edge>
     2be:	61 2f       	mov	r22, r17
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <write_high_nibble>
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	6d 2f       	mov	r22, r29
     2ca:	8c 2f       	mov	r24, r28
     2cc:	0e 94 38 06 	call	0xc70	; 0xc70 <DIO_write>
     2d0:	0e 94 2b 01 	call	0x256	; 0x256 <send_falling_edge>
     2d4:	8f ec       	ldi	r24, 0xCF	; 207
     2d6:	97 e0       	ldi	r25, 0x07	; 7
     2d8:	01 97       	sbiw	r24, 0x01	; 1
     2da:	f1 f7       	brne	.-4      	; 0x2d8 <LCD_vSend_cmd+0x44>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <LCD_vSend_cmd+0x4a>
     2de:	00 00       	nop
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	08 95       	ret

000002e8 <LCD_vInit>:
     2e8:	0f 93       	push	r16
     2ea:	1f 93       	push	r17
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	2f ef       	ldi	r18, 0xFF	; 255
     2f2:	81 ee       	ldi	r24, 0xE1	; 225
     2f4:	94 e0       	ldi	r25, 0x04	; 4
     2f6:	21 50       	subi	r18, 0x01	; 1
     2f8:	80 40       	sbci	r24, 0x00	; 0
     2fa:	90 40       	sbci	r25, 0x00	; 0
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <LCD_vInit+0xe>
     2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_vInit+0x18>
     300:	00 00       	nop
     302:	c0 e0       	ldi	r28, 0x00	; 0
     304:	0a c0       	rjmp	.+20     	; 0x31a <LCD_vInit+0x32>
     306:	ec 2f       	mov	r30, r28
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	e5 58       	subi	r30, 0x85	; 133
     30c:	ff 4f       	sbci	r31, 0xFF	; 255
     30e:	41 e0       	ldi	r20, 0x01	; 1
     310:	66 81       	ldd	r22, Z+6	; 0x06
     312:	80 e0       	ldi	r24, 0x00	; 0
     314:	0e 94 13 06 	call	0xc26	; 0xc26 <DIO_vsetPINDir>
     318:	cf 5f       	subi	r28, 0xFF	; 255
     31a:	c4 30       	cpi	r28, 0x04	; 4
     31c:	a0 f3       	brcs	.-24     	; 0x306 <LCD_vInit+0x1e>
     31e:	cb e7       	ldi	r28, 0x7B	; 123
     320:	d0 e0       	ldi	r29, 0x00	; 0
     322:	41 e0       	ldi	r20, 0x01	; 1
     324:	69 81       	ldd	r22, Y+1	; 0x01
     326:	88 81       	ld	r24, Y
     328:	0e 94 13 06 	call	0xc26	; 0xc26 <DIO_vsetPINDir>
     32c:	0d 81       	ldd	r16, Y+5	; 0x05
     32e:	1c 81       	ldd	r17, Y+4	; 0x04
     330:	41 e0       	ldi	r20, 0x01	; 1
     332:	60 2f       	mov	r22, r16
     334:	81 2f       	mov	r24, r17
     336:	0e 94 13 06 	call	0xc26	; 0xc26 <DIO_vsetPINDir>
     33a:	41 e0       	ldi	r20, 0x01	; 1
     33c:	6b 81       	ldd	r22, Y+3	; 0x03
     33e:	8a 81       	ldd	r24, Y+2	; 0x02
     340:	0e 94 13 06 	call	0xc26	; 0xc26 <DIO_vsetPINDir>
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	60 2f       	mov	r22, r16
     348:	81 2f       	mov	r24, r17
     34a:	0e 94 38 06 	call	0xc70	; 0xc70 <DIO_write>
     34e:	82 e0       	ldi	r24, 0x02	; 2
     350:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vSend_cmd>
     354:	8f e1       	ldi	r24, 0x1F	; 31
     356:	9e e4       	ldi	r25, 0x4E	; 78
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <LCD_vInit+0x70>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <LCD_vInit+0x76>
     35e:	00 00       	nop
     360:	88 e2       	ldi	r24, 0x28	; 40
     362:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vSend_cmd>
     366:	8f ec       	ldi	r24, 0xCF	; 207
     368:	97 e0       	ldi	r25, 0x07	; 7
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <LCD_vInit+0x82>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <LCD_vInit+0x88>
     370:	00 00       	nop
     372:	8c e0       	ldi	r24, 0x0C	; 12
     374:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vSend_cmd>
     378:	8f ec       	ldi	r24, 0xCF	; 207
     37a:	97 e0       	ldi	r25, 0x07	; 7
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <LCD_vInit+0x94>
     380:	00 c0       	rjmp	.+0      	; 0x382 <LCD_vInit+0x9a>
     382:	00 00       	nop
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vSend_cmd>
     38a:	8f e1       	ldi	r24, 0x1F	; 31
     38c:	9e e4       	ldi	r25, 0x4E	; 78
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <LCD_vInit+0xa6>
     392:	00 c0       	rjmp	.+0      	; 0x394 <LCD_vInit+0xac>
     394:	00 00       	nop
     396:	86 e0       	ldi	r24, 0x06	; 6
     398:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vSend_cmd>
     39c:	8f ec       	ldi	r24, 0xCF	; 207
     39e:	97 e0       	ldi	r25, 0x07	; 7
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <LCD_vInit+0xb8>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <LCD_vInit+0xbe>
     3a6:	00 00       	nop
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	08 95       	ret

000003b2 <LCD_vSend_char>:
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	18 2f       	mov	r17, r24
     3ba:	68 2f       	mov	r22, r24
     3bc:	65 95       	asr	r22
     3be:	65 95       	asr	r22
     3c0:	65 95       	asr	r22
     3c2:	65 95       	asr	r22
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <write_high_nibble>
     3ca:	eb e7       	ldi	r30, 0x7B	; 123
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	d3 81       	ldd	r29, Z+3	; 0x03
     3d0:	c2 81       	ldd	r28, Z+2	; 0x02
     3d2:	41 e0       	ldi	r20, 0x01	; 1
     3d4:	6d 2f       	mov	r22, r29
     3d6:	8c 2f       	mov	r24, r28
     3d8:	0e 94 38 06 	call	0xc70	; 0xc70 <DIO_write>
     3dc:	0e 94 2b 01 	call	0x256	; 0x256 <send_falling_edge>
     3e0:	61 2f       	mov	r22, r17
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <write_high_nibble>
     3e8:	41 e0       	ldi	r20, 0x01	; 1
     3ea:	6d 2f       	mov	r22, r29
     3ec:	8c 2f       	mov	r24, r28
     3ee:	0e 94 38 06 	call	0xc70	; 0xc70 <DIO_write>
     3f2:	0e 94 2b 01 	call	0x256	; 0x256 <send_falling_edge>
     3f6:	8f ec       	ldi	r24, 0xCF	; 207
     3f8:	97 e0       	ldi	r25, 0x07	; 7
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <LCD_vSend_char+0x48>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
     400:	00 00       	nop
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	08 95       	ret

0000040a <LCD_vSend_string>:
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	ec 01       	movw	r28, r24
     410:	0c c0       	rjmp	.+24     	; 0x42a <LCD_vSend_string+0x20>
     412:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_vSend_char>
     416:	2f e7       	ldi	r18, 0x7F	; 127
     418:	88 e3       	ldi	r24, 0x38	; 56
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	21 50       	subi	r18, 0x01	; 1
     41e:	80 40       	sbci	r24, 0x00	; 0
     420:	90 40       	sbci	r25, 0x00	; 0
     422:	e1 f7       	brne	.-8      	; 0x41c <LCD_vSend_string+0x12>
     424:	00 c0       	rjmp	.+0      	; 0x426 <LCD_vSend_string+0x1c>
     426:	00 00       	nop
     428:	21 96       	adiw	r28, 0x01	; 1
     42a:	88 81       	ld	r24, Y
     42c:	81 11       	cpse	r24, r1
     42e:	f1 cf       	rjmp	.-30     	; 0x412 <LCD_vSend_string+0x8>
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <LCD_shiftDisplay>:
	_delay_ms(10);
}
void LCD_shiftDisplay(uint8_t direction)
{

	if(direction == RIGHT)
     436:	81 30       	cpi	r24, 0x01	; 1
     438:	21 f4       	brne	.+8      	; 0x442 <LCD_shiftDisplay+0xc>
	{
		LCD_vSend_cmd(MOVE_RIGHT);
     43a:	8c e1       	ldi	r24, 0x1C	; 28
     43c:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vSend_cmd>
     440:	05 c0       	rjmp	.+10     	; 0x44c <LCD_shiftDisplay+0x16>
	}
	else if(direction == LEFT)
     442:	81 11       	cpse	r24, r1
     444:	03 c0       	rjmp	.+6      	; 0x44c <LCD_shiftDisplay+0x16>
	{
		LCD_vSend_cmd(MOVE_LEFT);
     446:	88 e1       	ldi	r24, 0x18	; 24
     448:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vSend_cmd>
     44c:	8f ec       	ldi	r24, 0xCF	; 207
     44e:	97 e0       	ldi	r25, 0x07	; 7
     450:	01 97       	sbiw	r24, 0x01	; 1
     452:	f1 f7       	brne	.-4      	; 0x450 <LCD_shiftDisplay+0x1a>
     454:	00 c0       	rjmp	.+0      	; 0x456 <LCD_shiftDisplay+0x20>
     456:	00 00       	nop
     458:	08 95       	ret

0000045a <LCD_movecursor>:
}

void LCD_movecursor(uint8_t row,uint8_t coloumn)
{
	int8_t data = 0 ;
	if(row>2||row<1||coloumn>16||coloumn<1)
     45a:	9f ef       	ldi	r25, 0xFF	; 255
     45c:	98 0f       	add	r25, r24
     45e:	92 30       	cpi	r25, 0x02	; 2
     460:	70 f4       	brcc	.+28     	; 0x47e <LCD_movecursor+0x24>
     462:	61 31       	cpi	r22, 0x11	; 17
     464:	70 f4       	brcc	.+28     	; 0x482 <LCD_movecursor+0x28>
     466:	66 23       	and	r22, r22
     468:	71 f0       	breq	.+28     	; 0x486 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
     46a:	81 30       	cpi	r24, 0x01	; 1
     46c:	19 f4       	brne	.+6      	; 0x474 <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
     46e:	8f e7       	ldi	r24, 0x7F	; 127
     470:	86 0f       	add	r24, r22
     472:	0c c0       	rjmp	.+24     	; 0x48c <LCD_movecursor+0x32>
	}
	else if (row==2)
     474:	82 30       	cpi	r24, 0x02	; 2
     476:	49 f4       	brne	.+18     	; 0x48a <LCD_movecursor+0x30>
	{
		data=0xc0+coloumn-1;
     478:	8f eb       	ldi	r24, 0xBF	; 191
     47a:	86 0f       	add	r24, r22
     47c:	07 c0       	rjmp	.+14     	; 0x48c <LCD_movecursor+0x32>
void LCD_movecursor(uint8_t row,uint8_t coloumn)
{
	int8_t data = 0 ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
     47e:	80 e8       	ldi	r24, 0x80	; 128
     480:	05 c0       	rjmp	.+10     	; 0x48c <LCD_movecursor+0x32>
     482:	80 e8       	ldi	r24, 0x80	; 128
     484:	03 c0       	rjmp	.+6      	; 0x48c <LCD_movecursor+0x32>
     486:	80 e8       	ldi	r24, 0x80	; 128
     488:	01 c0       	rjmp	.+2      	; 0x48c <LCD_movecursor+0x32>
	_delay_ms(1);
}

void LCD_movecursor(uint8_t row,uint8_t coloumn)
{
	int8_t data = 0 ;
     48a:	80 e0       	ldi	r24, 0x00	; 0
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
     48c:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vSend_cmd>
     490:	8f ec       	ldi	r24, 0xCF	; 207
     492:	97 e0       	ldi	r25, 0x07	; 7
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <LCD_movecursor+0x3a>
     498:	00 c0       	rjmp	.+0      	; 0x49a <LCD_movecursor+0x40>
     49a:	00 00       	nop
     49c:	08 95       	ret

0000049e <LCD_StandbyScreen>:
			LCD_shiftDisplay(RIGHT);
		}
	}
	LCD_StandbyScreen();
}
void LCD_StandbyScreen(void){
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	6c 97       	sbiw	r28, 0x1c	; 28
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
	LCD_vSend_cmd(CLR_SCREEN);
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vSend_cmd>
	int8_t SetTempArray[]="SET:##";
     4b8:	87 e0       	ldi	r24, 0x07	; 7
     4ba:	e5 e8       	ldi	r30, 0x85	; 133
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	de 01       	movw	r26, r28
     4c0:	11 96       	adiw	r26, 0x01	; 1
     4c2:	01 90       	ld	r0, Z+
     4c4:	0d 92       	st	X+, r0
     4c6:	8a 95       	dec	r24
     4c8:	e1 f7       	brne	.-8      	; 0x4c2 <LCD_StandbyScreen+0x24>
	int8_t CurrentTempArray[]="CRT:##";
     4ca:	87 e0       	ldi	r24, 0x07	; 7
     4cc:	ec e8       	ldi	r30, 0x8C	; 140
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	de 01       	movw	r26, r28
     4d2:	18 96       	adiw	r26, 0x08	; 8
     4d4:	01 90       	ld	r0, Z+
     4d6:	0d 92       	st	X+, r0
     4d8:	8a 95       	dec	r24
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <LCD_StandbyScreen+0x36>
	int8_t SystemStateArray[] = "STATE:STANDBY";
     4dc:	8e e0       	ldi	r24, 0x0E	; 14
     4de:	e3 e9       	ldi	r30, 0x93	; 147
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	de 01       	movw	r26, r28
     4e4:	1f 96       	adiw	r26, 0x0f	; 15
     4e6:	01 90       	ld	r0, Z+
     4e8:	0d 92       	st	X+, r0
     4ea:	8a 95       	dec	r24
     4ec:	e1 f7       	brne	.-8      	; 0x4e6 <LCD_StandbyScreen+0x48>
	LCD_movecursor(1,1);
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_movecursor>
	LCD_vSend_string(SetTempArray);
     4f6:	ce 01       	movw	r24, r28
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_vSend_string>
	LCD_movecursor(1,10);
     4fe:	6a e0       	ldi	r22, 0x0A	; 10
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_movecursor>
	LCD_vSend_string(CurrentTempArray);
     506:	ce 01       	movw	r24, r28
     508:	08 96       	adiw	r24, 0x08	; 8
     50a:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_vSend_string>
	LCD_movecursor(2,1);
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	82 e0       	ldi	r24, 0x02	; 2
     512:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_movecursor>
	LCD_vSend_string(SystemStateArray);
     516:	ce 01       	movw	r24, r28
     518:	0f 96       	adiw	r24, 0x0f	; 15
     51a:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_vSend_string>
}
     51e:	6c 96       	adiw	r28, 0x1c	; 28
     520:	0f b6       	in	r0, 0x3f	; 63
     522:	f8 94       	cli
     524:	de bf       	out	0x3e, r29	; 62
     526:	0f be       	out	0x3f, r0	; 63
     528:	cd bf       	out	0x3d, r28	; 61
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	08 95       	ret

00000530 <LCD_WelcomeScreen>:

#include <util/delay.h>

#include "LCD_service.h"

void LCD_WelcomeScreen(void){
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	28 97       	sbiw	r28, 0x08	; 8
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
	int8_t Welcom[] = "WELCOME";
     548:	88 e0       	ldi	r24, 0x08	; 8
     54a:	e1 ea       	ldi	r30, 0xA1	; 161
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	de 01       	movw	r26, r28
     550:	11 96       	adiw	r26, 0x01	; 1
     552:	01 90       	ld	r0, Z+
     554:	0d 92       	st	X+, r0
     556:	8a 95       	dec	r24
     558:	e1 f7       	brne	.-8      	; 0x552 <LCD_WelcomeScreen+0x22>
	LCD_movecursor(1,10);
     55a:	6a e0       	ldi	r22, 0x0A	; 10
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_movecursor>
	LCD_vSend_cmd(CURSOR_OFF_DISPLAN_ON);
     562:	8c e0       	ldi	r24, 0x0C	; 12
     564:	0e 94 4a 01 	call	0x294	; 0x294 <LCD_vSend_cmd>
	LCD_vSend_string(Welcom);
     568:	ce 01       	movw	r24, r28
     56a:	01 96       	adiw	r24, 0x01	; 1
     56c:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_vSend_string>
	uint8_t WelcomeScreenCounter=0;
	uint8_t WelcomeScreenRepeat =0;
	for (WelcomeScreenRepeat=0;WelcomeScreenRepeat<3;WelcomeScreenRepeat++)
     570:	00 e0       	ldi	r16, 0x00	; 0
     572:	23 c0       	rjmp	.+70     	; 0x5ba <LCD_WelcomeScreen+0x8a>
     574:	2f ef       	ldi	r18, 0xFF	; 255
     576:	80 e7       	ldi	r24, 0x70	; 112
     578:	92 e0       	ldi	r25, 0x02	; 2
     57a:	21 50       	subi	r18, 0x01	; 1
     57c:	80 40       	sbci	r24, 0x00	; 0
     57e:	90 40       	sbci	r25, 0x00	; 0
     580:	e1 f7       	brne	.-8      	; 0x57a <LCD_WelcomeScreen+0x4a>
     582:	00 c0       	rjmp	.+0      	; 0x584 <LCD_WelcomeScreen+0x54>
     584:	00 00       	nop
	{
		for(WelcomeScreenCounter =0;WelcomeScreenCounter<9;WelcomeScreenCounter++){
			_delay_ms(100);
			LCD_shiftDisplay(LEFT);
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	0e 94 1b 02 	call	0x436	; 0x436 <LCD_shiftDisplay>
	LCD_vSend_string(Welcom);
	uint8_t WelcomeScreenCounter=0;
	uint8_t WelcomeScreenRepeat =0;
	for (WelcomeScreenRepeat=0;WelcomeScreenRepeat<3;WelcomeScreenRepeat++)
	{
		for(WelcomeScreenCounter =0;WelcomeScreenCounter<9;WelcomeScreenCounter++){
     58c:	1f 5f       	subi	r17, 0xFF	; 255
     58e:	01 c0       	rjmp	.+2      	; 0x592 <LCD_WelcomeScreen+0x62>
     590:	10 e0       	ldi	r17, 0x00	; 0
     592:	19 30       	cpi	r17, 0x09	; 9
     594:	78 f3       	brcs	.-34     	; 0x574 <LCD_WelcomeScreen+0x44>
     596:	10 e0       	ldi	r17, 0x00	; 0
     598:	0d c0       	rjmp	.+26     	; 0x5b4 <LCD_WelcomeScreen+0x84>
     59a:	2f ef       	ldi	r18, 0xFF	; 255
     59c:	80 e7       	ldi	r24, 0x70	; 112
     59e:	92 e0       	ldi	r25, 0x02	; 2
     5a0:	21 50       	subi	r18, 0x01	; 1
     5a2:	80 40       	sbci	r24, 0x00	; 0
     5a4:	90 40       	sbci	r25, 0x00	; 0
     5a6:	e1 f7       	brne	.-8      	; 0x5a0 <LCD_WelcomeScreen+0x70>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <LCD_WelcomeScreen+0x7a>
     5aa:	00 00       	nop
			_delay_ms(100);
			LCD_shiftDisplay(LEFT);
		}
		for(WelcomeScreenCounter =0;WelcomeScreenCounter<9;WelcomeScreenCounter++){
			_delay_ms(100);
			LCD_shiftDisplay(RIGHT);
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	0e 94 1b 02 	call	0x436	; 0x436 <LCD_shiftDisplay>
	{
		for(WelcomeScreenCounter =0;WelcomeScreenCounter<9;WelcomeScreenCounter++){
			_delay_ms(100);
			LCD_shiftDisplay(LEFT);
		}
		for(WelcomeScreenCounter =0;WelcomeScreenCounter<9;WelcomeScreenCounter++){
     5b2:	1f 5f       	subi	r17, 0xFF	; 255
     5b4:	19 30       	cpi	r17, 0x09	; 9
     5b6:	88 f3       	brcs	.-30     	; 0x59a <LCD_WelcomeScreen+0x6a>
	LCD_movecursor(1,10);
	LCD_vSend_cmd(CURSOR_OFF_DISPLAN_ON);
	LCD_vSend_string(Welcom);
	uint8_t WelcomeScreenCounter=0;
	uint8_t WelcomeScreenRepeat =0;
	for (WelcomeScreenRepeat=0;WelcomeScreenRepeat<3;WelcomeScreenRepeat++)
     5b8:	0f 5f       	subi	r16, 0xFF	; 255
     5ba:	03 30       	cpi	r16, 0x03	; 3
     5bc:	48 f3       	brcs	.-46     	; 0x590 <LCD_WelcomeScreen+0x60>
		for(WelcomeScreenCounter =0;WelcomeScreenCounter<9;WelcomeScreenCounter++){
			_delay_ms(100);
			LCD_shiftDisplay(RIGHT);
		}
	}
	LCD_StandbyScreen();
     5be:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_StandbyScreen>
}
     5c2:	28 96       	adiw	r28, 0x08	; 8
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	08 95       	ret

000005d8 <LCD_SetSetTemp>:
	LCD_movecursor(1,10);
	LCD_vSend_string(CurrentTempArray);
	LCD_movecursor(2,1);
	LCD_vSend_string(SystemStateArray);
}
void LCD_SetSetTemp(int8_t tempInt){
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <LCD_SetSetTemp+0xa>
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <LCD_SetSetTemp+0xc>
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	08 2f       	mov	r16, r24
	int8_t col = 5;
	for (int8_t loop = 5;loop<7;loop++)
     5ea:	15 e0       	ldi	r17, 0x05	; 5
     5ec:	08 c0       	rjmp	.+16     	; 0x5fe <LCD_SetSetTemp+0x26>
	{
		LCD_movecursor(1,loop);
     5ee:	61 2f       	mov	r22, r17
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_movecursor>
		LCD_vSend_char((int8_t)' ');
     5f6:	80 e2       	ldi	r24, 0x20	; 32
     5f8:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_vSend_char>
	LCD_movecursor(2,1);
	LCD_vSend_string(SystemStateArray);
}
void LCD_SetSetTemp(int8_t tempInt){
	int8_t col = 5;
	for (int8_t loop = 5;loop<7;loop++)
     5fc:	1f 5f       	subi	r17, 0xFF	; 255
     5fe:	17 30       	cpi	r17, 0x07	; 7
     600:	b4 f3       	brlt	.-20     	; 0x5ee <LCD_SetSetTemp+0x16>
	{
		LCD_movecursor(1,loop);
		LCD_vSend_char((int8_t)' ');
	}
	LCD_movecursor(1,col);
     602:	65 e0       	ldi	r22, 0x05	; 5
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_movecursor>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     60a:	4a e0       	ldi	r20, 0x0A	; 10
     60c:	be 01       	movw	r22, r28
     60e:	6f 5f       	subi	r22, 0xFF	; 255
     610:	7f 4f       	sbci	r23, 0xFF	; 255
     612:	80 2f       	mov	r24, r16
     614:	00 2e       	mov	r0, r16
     616:	00 0c       	add	r0, r0
     618:	99 0b       	sbc	r25, r25
     61a:	0e 94 2e 09 	call	0x125c	; 0x125c <__itoa_ncheck>
	
	char CurrentTempString[4];
	itoa(tempInt,CurrentTempString,10);
	if((tempInt/(int8_t)10) == 0){
     61e:	07 5f       	subi	r16, 0xF7	; 247
     620:	03 31       	cpi	r16, 0x13	; 19
     622:	40 f4       	brcc	.+16     	; 0x634 <LCD_SetSetTemp+0x5c>
		LCD_vSend_char('0');
     624:	80 e3       	ldi	r24, 0x30	; 48
     626:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_vSend_char>
		LCD_vSend_string((int8_t *)CurrentTempString);
     62a:	ce 01       	movw	r24, r28
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_vSend_string>
     632:	04 c0       	rjmp	.+8      	; 0x63c <LCD_SetSetTemp+0x64>
	}
	else{
		LCD_vSend_string((int8_t *)CurrentTempString);
     634:	ce 01       	movw	r24, r28
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_vSend_string>
	}

}
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	08 95       	ret

0000064e <LCD_SetCurrentTemp>:
void LCD_SetCurrentTemp(int8_t CurrentTempInt){
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	00 d0       	rcall	.+0      	; 0x656 <LCD_SetCurrentTemp+0x8>
     656:	00 d0       	rcall	.+0      	; 0x658 <LCD_SetCurrentTemp+0xa>
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	18 2f       	mov	r17, r24
	LCD_movecursor(1,14);
     65e:	6e e0       	ldi	r22, 0x0E	; 14
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_movecursor>
     666:	4a e0       	ldi	r20, 0x0A	; 10
     668:	be 01       	movw	r22, r28
     66a:	6f 5f       	subi	r22, 0xFF	; 255
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	81 2f       	mov	r24, r17
     670:	01 2e       	mov	r0, r17
     672:	00 0c       	add	r0, r0
     674:	99 0b       	sbc	r25, r25
     676:	0e 94 2e 09 	call	0x125c	; 0x125c <__itoa_ncheck>
	char CurrentTempString[4];
	itoa(CurrentTempInt,CurrentTempString,10);
	if((CurrentTempInt/(int8_t)10) == 0){
     67a:	17 5f       	subi	r17, 0xF7	; 247
     67c:	13 31       	cpi	r17, 0x13	; 19
     67e:	40 f4       	brcc	.+16     	; 0x690 <LCD_SetCurrentTemp+0x42>
		LCD_vSend_char('0');
     680:	80 e3       	ldi	r24, 0x30	; 48
     682:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_vSend_char>
		LCD_vSend_string((int8_t *)CurrentTempString);
     686:	ce 01       	movw	r24, r28
     688:	01 96       	adiw	r24, 0x01	; 1
     68a:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_vSend_string>
     68e:	04 c0       	rjmp	.+8      	; 0x698 <LCD_SetCurrentTemp+0x4a>
	}
	else{
		LCD_vSend_string((int8_t *)CurrentTempString);
     690:	ce 01       	movw	r24, r28
     692:	01 96       	adiw	r24, 0x01	; 1
     694:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_vSend_string>
	}
}
     698:	0f 90       	pop	r0
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	08 95       	ret

000006a8 <LCD_SetSystemState>:
void LCD_SetSystemState(char *State){
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	8c 01       	movw	r16, r24
	//unsigned char prevState = 
	for (uint8_t loop = 7; loop < 17; loop++)
     6b0:	c7 e0       	ldi	r28, 0x07	; 7
     6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <LCD_SetSystemState+0x1c>
	{
		LCD_movecursor(2,loop);
     6b4:	6c 2f       	mov	r22, r28
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_movecursor>
		LCD_vSend_char((int8_t)' ');
     6bc:	80 e2       	ldi	r24, 0x20	; 32
     6be:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <LCD_vSend_char>
		LCD_vSend_string((int8_t *)CurrentTempString);
	}
}
void LCD_SetSystemState(char *State){
	//unsigned char prevState = 
	for (uint8_t loop = 7; loop < 17; loop++)
     6c2:	cf 5f       	subi	r28, 0xFF	; 255
     6c4:	c1 31       	cpi	r28, 0x11	; 17
     6c6:	b0 f3       	brcs	.-20     	; 0x6b4 <LCD_SetSystemState+0xc>
	{
		LCD_movecursor(2,loop);
		LCD_vSend_char((int8_t)' ');
	}
	LCD_movecursor(2,7);
     6c8:	67 e0       	ldi	r22, 0x07	; 7
     6ca:	82 e0       	ldi	r24, 0x02	; 2
     6cc:	0e 94 2d 02 	call	0x45a	; 0x45a <LCD_movecursor>
	LCD_vSend_string((int8_t *)State);
     6d0:	c8 01       	movw	r24, r16
     6d2:	0e 94 05 02 	call	0x40a	; 0x40a <LCD_vSend_string>
}
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	08 95       	ret

000006de <tc72_Init>:
#include <util/delay.h>
#include "..\MCAL\std_macros.h"
#include "..\MCAL\SPI.h"

void tc72_Init(void){
	SPI_Init();
     6de:	0e 94 ac 06 	call	0xd58	; 0xd58 <SPI_Init>
	SET_BIT(SPI_PORT , SS);
     6e2:	88 b3       	in	r24, 0x18	; 24
     6e4:	80 61       	ori	r24, 0x10	; 16
     6e6:	88 bb       	out	0x18, r24	; 24
	
	/*Select Control Register*/
	SPI_Write(0x80);
     6e8:	80 e8       	ldi	r24, 0x80	; 128
     6ea:	0e 94 b9 06 	call	0xd72	; 0xd72 <SPI_Write>
	
	/*Select Continuous temperature Conversion*/
	SPI_Write(0x40);
     6ee:	80 e4       	ldi	r24, 0x40	; 64
     6f0:	0e 94 b9 06 	call	0xd72	; 0xd72 <SPI_Write>
	
	CLR_BIT(SPI_PORT , SS);
     6f4:	88 b3       	in	r24, 0x18	; 24
     6f6:	8f 7e       	andi	r24, 0xEF	; 239
     6f8:	88 bb       	out	0x18, r24	; 24
     6fa:	2f e7       	ldi	r18, 0x7F	; 127
     6fc:	89 ea       	ldi	r24, 0xA9	; 169
     6fe:	93 e0       	ldi	r25, 0x03	; 3
     700:	21 50       	subi	r18, 0x01	; 1
     702:	80 40       	sbci	r24, 0x00	; 0
     704:	90 40       	sbci	r25, 0x00	; 0
     706:	e1 f7       	brne	.-8      	; 0x700 <tc72_Init+0x22>
     708:	00 c0       	rjmp	.+0      	; 0x70a <tc72_Init+0x2c>
     70a:	00 00       	nop
     70c:	08 95       	ret

0000070e <tc72_read>:
	
	_delay_ms(150);
}

char tc72_read(void){
     70e:	cf 93       	push	r28
	char LSB = 0;		/* store temperature value */
	char MSB = 0;
	char tempValue = 0;
	/* ----------- LSB ---------- */
			
	SET_BIT(SPI_PORT , SS);
     710:	88 b3       	in	r24, 0x18	; 24
     712:	80 61       	ori	r24, 0x10	; 16
     714:	88 bb       	out	0x18, r24	; 24
	SPI_Write(0x01);
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	0e 94 b9 06 	call	0xd72	; 0xd72 <SPI_Write>
	SPI_Write(0x00);
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	0e 94 b9 06 	call	0xd72	; 0xd72 <SPI_Write>
	CLR_BIT(SPI_PORT , SS);
     722:	88 b3       	in	r24, 0x18	; 24
     724:	8f 7e       	andi	r24, 0xEF	; 239
     726:	88 bb       	out	0x18, r24	; 24
     728:	8f ec       	ldi	r24, 0xCF	; 207
     72a:	97 e0       	ldi	r25, 0x07	; 7
     72c:	01 97       	sbiw	r24, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <tc72_read+0x1e>
     730:	00 c0       	rjmp	.+0      	; 0x732 <tc72_read+0x24>
     732:	00 00       	nop
			
	_delay_ms(1);
	LSB = SPI_Read();
     734:	0e 94 bd 06 	call	0xd7a	; 0xd7a <SPI_Read>
     738:	c8 2f       	mov	r28, r24
	
	/* ----------- MSB ---------- */
			
	SET_BIT(SPI_PORT , SS);
     73a:	88 b3       	in	r24, 0x18	; 24
     73c:	80 61       	ori	r24, 0x10	; 16
     73e:	88 bb       	out	0x18, r24	; 24
	SPI_Write(0x02);			/* read will be from MSB temperature register */
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	0e 94 b9 06 	call	0xd72	; 0xd72 <SPI_Write>
	SPI_Write(0x00);
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	0e 94 b9 06 	call	0xd72	; 0xd72 <SPI_Write>
	CLR_BIT(SPI_PORT , SS);
     74c:	88 b3       	in	r24, 0x18	; 24
     74e:	8f 7e       	andi	r24, 0xEF	; 239
     750:	88 bb       	out	0x18, r24	; 24
     752:	8f ec       	ldi	r24, 0xCF	; 207
     754:	97 e0       	ldi	r25, 0x07	; 7
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	f1 f7       	brne	.-4      	; 0x756 <tc72_read+0x48>
     75a:	00 c0       	rjmp	.+0      	; 0x75c <tc72_read+0x4e>
     75c:	00 00       	nop
			
	_delay_ms(1);
	MSB = SPI_Read();
     75e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <SPI_Read>
	
	LSB >>= 7;
     762:	cc 1f       	adc	r28, r28
     764:	cc 27       	eor	r28, r28
     766:	cc 1f       	adc	r28, r28
	MSB <<= 1;
     768:	88 0f       	add	r24, r24
	tempValue = MSB | LSB;
	return tempValue;
     76a:	8c 2b       	or	r24, r28
     76c:	cf 91       	pop	r28
     76e:	08 95       	ret

00000770 <__vector_5>:
volatile int8_t KeypadInput[2]={};
volatile uint8_t arrayIndex = 0;
volatile uint16_t clearUnUsedTempCounter = 0;
volatile uint8_t clearUnUsedTempFlag = 0;
volatile double Vr = 5;
ISR(TIMER2_OVF_vect){
     770:	1f 92       	push	r1
     772:	0f 92       	push	r0
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	0f 92       	push	r0
     778:	11 24       	eor	r1, r1
     77a:	2f 93       	push	r18
     77c:	3f 93       	push	r19
     77e:	4f 93       	push	r20
     780:	5f 93       	push	r21
     782:	6f 93       	push	r22
     784:	7f 93       	push	r23
     786:	8f 93       	push	r24
     788:	9f 93       	push	r25
     78a:	af 93       	push	r26
     78c:	bf 93       	push	r27
     78e:	ef 93       	push	r30
     790:	ff 93       	push	r31
	timerCounter++;
     792:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <timerCounter>
     796:	8f 5f       	subi	r24, 0xFF	; 255
     798:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <timerCounter>
	if (timerCounter % 49 == 0 )
     79c:	20 91 cf 00 	lds	r18, 0x00CF	; 0x8000cf <timerCounter>
     7a0:	8f e4       	ldi	r24, 0x4F	; 79
     7a2:	28 9f       	mul	r18, r24
     7a4:	91 2d       	mov	r25, r1
     7a6:	11 24       	eor	r1, r1
     7a8:	82 2f       	mov	r24, r18
     7aa:	89 1b       	sub	r24, r25
     7ac:	86 95       	lsr	r24
     7ae:	89 0f       	add	r24, r25
     7b0:	82 95       	swap	r24
     7b2:	86 95       	lsr	r24
     7b4:	87 70       	andi	r24, 0x07	; 7
     7b6:	91 e3       	ldi	r25, 0x31	; 49
     7b8:	89 9f       	mul	r24, r25
     7ba:	20 19       	sub	r18, r0
     7bc:	11 24       	eor	r1, r1
     7be:	21 11       	cpse	r18, r1
     7c0:	3f c0       	rjmp	.+126    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
	{
		timer++;
     7c2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <timer>
     7c6:	8f 5f       	subi	r24, 0xFF	; 255
     7c8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <timer>
		if (timer %2 == 0)
     7cc:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <timer>
     7d0:	80 fd       	sbrc	r24, 0
     7d2:	04 c0       	rjmp	.+8      	; 0x7dc <__vector_5+0x6c>
		{
			currentTemp = tc72_read();
     7d4:	0e 94 87 03 	call	0x70e	; 0x70e <tc72_read>
     7d8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <currentTemp>
			
		}
		if (timer %5 == 0)
     7dc:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <timer>
     7e0:	8d ec       	ldi	r24, 0xCD	; 205
     7e2:	98 9f       	mul	r25, r24
     7e4:	81 2d       	mov	r24, r1
     7e6:	11 24       	eor	r1, r1
     7e8:	86 95       	lsr	r24
     7ea:	86 95       	lsr	r24
     7ec:	28 2f       	mov	r18, r24
     7ee:	22 0f       	add	r18, r18
     7f0:	22 0f       	add	r18, r18
     7f2:	82 0f       	add	r24, r18
     7f4:	98 13       	cpse	r25, r24
     7f6:	0a c0       	rjmp	.+20     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
		{
			Vr = ADC_u16Read();
     7f8:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <ADC_u16Read>
     7fc:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
     800:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     804:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     808:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		}
		if(timerThreeMinFlag == 1){
     80c:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <timerThreeMinFlag>
     810:	81 30       	cpi	r24, 0x01	; 1
     812:	49 f4       	brne	.+18     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
			timerThreeMinCounter++;
     814:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <timerThreeMinCounter>
     818:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <timerThreeMinCounter+0x1>
     81c:	01 96       	adiw	r24, 0x01	; 1
     81e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <timerThreeMinCounter+0x1>
     822:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <timerThreeMinCounter>
		}
		if (clearUnUsedTempFlag==1)
     826:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <clearUnUsedTempFlag>
     82a:	81 30       	cpi	r24, 0x01	; 1
     82c:	49 f4       	brne	.+18     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
		{
			clearUnUsedTempCounter++;
     82e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <clearUnUsedTempCounter>
     832:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <clearUnUsedTempCounter+0x1>
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <clearUnUsedTempCounter+0x1>
     83c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <clearUnUsedTempCounter>
		}
	}
	// timerCounter = 49 = 100.352 ms
}
     840:	ff 91       	pop	r31
     842:	ef 91       	pop	r30
     844:	bf 91       	pop	r27
     846:	af 91       	pop	r26
     848:	9f 91       	pop	r25
     84a:	8f 91       	pop	r24
     84c:	7f 91       	pop	r23
     84e:	6f 91       	pop	r22
     850:	5f 91       	pop	r21
     852:	4f 91       	pop	r20
     854:	3f 91       	pop	r19
     856:	2f 91       	pop	r18
     858:	0f 90       	pop	r0
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	0f 90       	pop	r0
     85e:	1f 90       	pop	r1
     860:	18 95       	reti

00000862 <main>:
/*

*/

int main(void)
{
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	2a 97       	sbiw	r28, 0x0a	; 10
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61

	
	uint8_t keypadTempValue = 0;
	uint8_t keypadStartValue = 0;
	char systemState[10] = STANDBY;
     876:	88 e0       	ldi	r24, 0x08	; 8
     878:	e1 e7       	ldi	r30, 0x71	; 113
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	de 01       	movw	r26, r28
     87e:	11 96       	adiw	r26, 0x01	; 1
     880:	01 90       	ld	r0, Z+
     882:	0d 92       	st	X+, r0
     884:	8a 95       	dec	r24
     886:	e1 f7       	brne	.-8      	; 0x880 <main+0x1e>
     888:	1a 86       	std	Y+10, r1	; 0x0a
     88a:	19 86       	std	Y+9, r1	; 0x09
	double Vt = 0;
	uint8_t setTempValue = 25;
	double dutycycleValue = 0;
	uint8_t keypadFlag = 1;
    /* Replace with your application code */
	LCD_vInit();
     88c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCD_vInit>
	tc72_Init();
     890:	0e 94 6f 03 	call	0x6de	; 0x6de <tc72_Init>
	LCD_WelcomeScreen();
     894:	0e 94 98 02 	call	0x530	; 0x530 <LCD_WelcomeScreen>
	keypad_vInit();
     898:	0e 94 49 00 	call	0x92	; 0x92 <keypad_vInit>
	ADC_vinit();
     89c:	0e 94 e7 05 	call	0xbce	; 0xbce <ADC_vinit>
	timer2_overFlow_init_interrupt();
     8a0:	0e 94 e6 06 	call	0xdcc	; 0xdcc <timer2_overFlow_init_interrupt>
	timer_wave_phasecorrectPWM(0);
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	cb 01       	movw	r24, r22
     8aa:	0e 94 c1 06 	call	0xd82	; 0xd82 <timer_wave_phasecorrectPWM>
	uint8_t keypadStartValue = 0;
	char systemState[10] = STANDBY;
	double Vt = 0;
	uint8_t setTempValue = 25;
	double dutycycleValue = 0;
	uint8_t keypadFlag = 1;
     8ae:	11 e0       	ldi	r17, 0x01	; 1
	
	uint8_t keypadTempValue = 0;
	uint8_t keypadStartValue = 0;
	char systemState[10] = STANDBY;
	double Vt = 0;
	uint8_t setTempValue = 25;
     8b0:	0f 2e       	mov	r0, r31
     8b2:	f9 e1       	ldi	r31, 0x19	; 25
     8b4:	ff 2e       	mov	r15, r31
     8b6:	f0 2d       	mov	r31, r0
int main(void)
{

	
	uint8_t keypadTempValue = 0;
	uint8_t keypadStartValue = 0;
     8b8:	e1 2c       	mov	r14, r1
	timer2_overFlow_init_interrupt();
	timer_wave_phasecorrectPWM(0);
    while (1) 
    {
		//LCD_StandbyScreen();
		keypadTempValue = keypad_u8check_press();
     8ba:	0e 94 7c 00 	call	0xf8	; 0xf8 <keypad_u8check_press>
		if (keypadTempValue != NOTPRESSED)
     8be:	88 3c       	cpi	r24, 0xC8	; 200
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <main+0x62>
		{
			keypadStartValue = keypadTempValue;
     8c2:	e8 2e       	mov	r14, r24
			keypadTempValue = 0;
			
		}else{}
		if (keypadStartValue == '#')
     8c4:	23 e2       	ldi	r18, 0x23	; 35
     8c6:	e2 12       	cpse	r14, r18
     8c8:	f8 cf       	rjmp	.-16     	; 0x8ba <main+0x58>
		{
			if (strcmp(systemState ,OPERATIONAL)!=0)
     8ca:	69 ea       	ldi	r22, 0xA9	; 169
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	ce 01       	movw	r24, r28
     8d0:	01 96       	adiw	r24, 0x01	; 1
     8d2:	0e 94 25 09 	call	0x124a	; 0x124a <strcmp>
     8d6:	89 2b       	or	r24, r25
     8d8:	89 f0       	breq	.+34     	; 0x8fc <main+0x9a>
			{
				LCD_SetSystemState(OPERATIONAL);
     8da:	89 ea       	ldi	r24, 0xA9	; 169
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_SetSystemState>
				strcpy(systemState, OPERATIONAL);
     8e2:	8a e0       	ldi	r24, 0x0A	; 10
     8e4:	e9 ea       	ldi	r30, 0xA9	; 169
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	de 01       	movw	r26, r28
     8ea:	11 96       	adiw	r26, 0x01	; 1
     8ec:	01 90       	ld	r0, Z+
     8ee:	0d 92       	st	X+, r0
     8f0:	8a 95       	dec	r24
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <main+0x8a>
				LCD_SetSetTemp(setTempValue);
     8f4:	8f 2d       	mov	r24, r15
     8f6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <LCD_SetSetTemp>
				keypadStartValue=0;
     8fa:	e1 2c       	mov	r14, r1
			}
			else{}
				
			while (1){	
			LCD_SetCurrentTemp(currentTemp);		
     8fc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentTemp>
     900:	0e 94 27 03 	call	0x64e	; 0x64e <LCD_SetCurrentTemp>
			if (keypadFlag == 0)
     904:	11 23       	and	r17, r17
     906:	d1 f3       	breq	.-12     	; 0x8fc <main+0x9a>
			{	} 
			else
			{										
				if (setTempValue <=currentTemp)
     908:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentTemp>
     90c:	8f 15       	cp	r24, r15
     90e:	08 f4       	brcc	.+2      	; 0x912 <main+0xb0>
     910:	4a c0       	rjmp	.+148    	; 0x9a6 <main+0x144>
				{
					Vt = 0;
					uint8_t diffTemp = currentTemp - setTempValue;
     912:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentTemp>
     916:	8f 19       	sub	r24, r15
					if (diffTemp<=5){
     918:	86 30       	cpi	r24, 0x06	; 6
     91a:	10 f5       	brcc	.+68     	; 0x960 <main+0xfe>
						//keypad on
						if (strcmp(systemState ,NORMAL)!=0)
     91c:	63 eb       	ldi	r22, 0xB3	; 179
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	ce 01       	movw	r24, r28
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	0e 94 25 09 	call	0x124a	; 0x124a <strcmp>
     928:	89 2b       	or	r24, r25
     92a:	09 f4       	brne	.+2      	; 0x92e <main+0xcc>
     92c:	1e c1       	rjmp	.+572    	; 0xb6a <main+0x308>
						{
							LCD_SetSystemState(NORMAL);
     92e:	83 eb       	ldi	r24, 0xB3	; 179
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_SetSystemState>
							strcpy(systemState, NORMAL);
     936:	87 e0       	ldi	r24, 0x07	; 7
     938:	e3 eb       	ldi	r30, 0xB3	; 179
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	de 01       	movw	r26, r28
     93e:	11 96       	adiw	r26, 0x01	; 1
     940:	01 90       	ld	r0, Z+
     942:	0d 92       	st	X+, r0
     944:	8a 95       	dec	r24
     946:	e1 f7       	brne	.-8      	; 0x940 <main+0xde>
							dutycycleValue = 0;
							timer_wave_phasecorrectPWM(dutycycleValue);
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	cb 01       	movw	r24, r22
     94e:	0e 94 c1 06 	call	0xd82	; 0xd82 <timer_wave_phasecorrectPWM>
							timerThreeMinFlag = 0;
     952:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <timerThreeMinFlag>
							timerThreeMinCounter=0;
     956:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <timerThreeMinCounter+0x1>
     95a:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <timerThreeMinCounter>
     95e:	05 c1       	rjmp	.+522    	; 0xb6a <main+0x308>
						}
						else
						{
						}
					}
					else if(diffTemp>10){
     960:	8b 30       	cpi	r24, 0x0B	; 11
     962:	d0 f0       	brcs	.+52     	; 0x998 <main+0x136>
						if (strcmp(systemState ,ERROR)!=0)
     964:	6a eb       	ldi	r22, 0xBA	; 186
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	ce 01       	movw	r24, r28
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	0e 94 25 09 	call	0x124a	; 0x124a <strcmp>
     970:	89 2b       	or	r24, r25
     972:	09 f4       	brne	.+2      	; 0x976 <main+0x114>
     974:	fa c0       	rjmp	.+500    	; 0xb6a <main+0x308>
						{
							//keypad off
							keypadFlag = 0;
							LCD_SetSystemState(ERROR);
     976:	8a eb       	ldi	r24, 0xBA	; 186
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_SetSystemState>
							strcpy(systemState, ERROR);
     97e:	86 e0       	ldi	r24, 0x06	; 6
     980:	ea eb       	ldi	r30, 0xBA	; 186
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	de 01       	movw	r26, r28
     986:	11 96       	adiw	r26, 0x01	; 1
     988:	01 90       	ld	r0, Z+
     98a:	0d 92       	st	X+, r0
     98c:	8a 95       	dec	r24
     98e:	e1 f7       	brne	.-8      	; 0x988 <main+0x126>
							timer2_overFlow_stop_interrupt();
     990:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <timer2_overFlow_stop_interrupt>
					}
					else if(diffTemp>10){
						if (strcmp(systemState ,ERROR)!=0)
						{
							//keypad off
							keypadFlag = 0;
     994:	10 e0       	ldi	r17, 0x00	; 0
     996:	e9 c0       	rjmp	.+466    	; 0xb6a <main+0x308>
					}
					else{
						//keypad on
						keypadFlag = 1;
						dutycycleValue = 0;
						timer_wave_phasecorrectPWM(dutycycleValue);
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	cb 01       	movw	r24, r22
     99e:	0e 94 c1 06 	call	0xd82	; 0xd82 <timer_wave_phasecorrectPWM>
						}
						else{}
					}
					else{
						//keypad on
						keypadFlag = 1;
     9a2:	11 e0       	ldi	r17, 0x01	; 1
     9a4:	e2 c0       	rjmp	.+452    	; 0xb6a <main+0x308>
					}
				}
				
				else
				{
					uint8_t diffTemp = setTempValue - currentTemp;
     9a6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentTemp>
     9aa:	9f 2d       	mov	r25, r15
     9ac:	98 1b       	sub	r25, r24
					if (diffTemp<=5){
     9ae:	96 30       	cpi	r25, 0x06	; 6
     9b0:	18 f5       	brcc	.+70     	; 0x9f8 <main+0x196>
						if (strcmp(systemState ,NORMAL)!=0)
     9b2:	63 eb       	ldi	r22, 0xB3	; 179
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 25 09 	call	0x124a	; 0x124a <strcmp>
     9be:	89 2b       	or	r24, r25
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <main+0x162>
     9c2:	d3 c0       	rjmp	.+422    	; 0xb6a <main+0x308>
						{
							keypadFlag =1;
							dutycycleValue = 0;
							timer_wave_phasecorrectPWM(dutycycleValue);
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	cb 01       	movw	r24, r22
     9ca:	0e 94 c1 06 	call	0xd82	; 0xd82 <timer_wave_phasecorrectPWM>
							LCD_SetSystemState(NORMAL);
     9ce:	83 eb       	ldi	r24, 0xB3	; 179
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_SetSystemState>
							strcpy(systemState, NORMAL);
     9d6:	87 e0       	ldi	r24, 0x07	; 7
     9d8:	e3 eb       	ldi	r30, 0xB3	; 179
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	de 01       	movw	r26, r28
     9de:	11 96       	adiw	r26, 0x01	; 1
     9e0:	01 90       	ld	r0, Z+
     9e2:	0d 92       	st	X+, r0
     9e4:	8a 95       	dec	r24
     9e6:	e1 f7       	brne	.-8      	; 0x9e0 <main+0x17e>
							timerThreeMinFlag = 0;
     9e8:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <timerThreeMinFlag>
							timerThreeMinCounter=0;
     9ec:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <timerThreeMinCounter+0x1>
     9f0:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <timerThreeMinCounter>
				{
					uint8_t diffTemp = setTempValue - currentTemp;
					if (diffTemp<=5){
						if (strcmp(systemState ,NORMAL)!=0)
						{
							keypadFlag =1;
     9f4:	11 e0       	ldi	r17, 0x01	; 1
     9f6:	b9 c0       	rjmp	.+370    	; 0xb6a <main+0x308>
							timerThreeMinCounter=0;
						}
						else
						{	}
					}
					else if (diffTemp>5){
     9f8:	96 30       	cpi	r25, 0x06	; 6
     9fa:	08 f4       	brcc	.+2      	; 0x9fe <main+0x19c>
     9fc:	b6 c0       	rjmp	.+364    	; 0xb6a <main+0x308>
						timerThreeMinFlag = 1;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <timerThreeMinFlag>
						if (timerThreeMinCounter<=1800)
     a04:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <timerThreeMinCounter>
     a08:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <timerThreeMinCounter+0x1>
     a0c:	89 30       	cpi	r24, 0x09	; 9
     a0e:	97 40       	sbci	r25, 0x07	; 7
     a10:	08 f0       	brcs	.+2      	; 0xa14 <main+0x1b2>
     a12:	8e c0       	rjmp	.+284    	; 0xb30 <main+0x2ce>
						{
							keypadFlag=1;
							if (strcmp(systemState ,OPERATIONAL)!=0)
     a14:	69 ea       	ldi	r22, 0xA9	; 169
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	ce 01       	movw	r24, r28
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	0e 94 25 09 	call	0x124a	; 0x124a <strcmp>
     a20:	89 2b       	or	r24, r25
     a22:	09 f4       	brne	.+2      	; 0xa26 <main+0x1c4>
     a24:	49 c0       	rjmp	.+146    	; 0xab8 <main+0x256>
							{
								LCD_SetSystemState(OPERATIONAL);
     a26:	89 ea       	ldi	r24, 0xA9	; 169
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_SetSystemState>
								strcpy(systemState, OPERATIONAL);
     a2e:	8a e0       	ldi	r24, 0x0A	; 10
     a30:	e9 ea       	ldi	r30, 0xA9	; 169
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	de 01       	movw	r26, r28
     a36:	11 96       	adiw	r26, 0x01	; 1
     a38:	01 90       	ld	r0, Z+
     a3a:	0d 92       	st	X+, r0
     a3c:	8a 95       	dec	r24
     a3e:	e1 f7       	brne	.-8      	; 0xa38 <main+0x1d6>
								Vt = ( (double)(setTempValue - currentTemp)/100 ) *10;
     a40:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentTemp>
     a44:	6f 2d       	mov	r22, r15
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	68 1b       	sub	r22, r24
     a4a:	71 09       	sbc	r23, r1
     a4c:	07 2e       	mov	r0, r23
     a4e:	00 0c       	add	r0, r0
     a50:	88 0b       	sbc	r24, r24
     a52:	99 0b       	sbc	r25, r25
     a54:	0e 94 0e 08 	call	0x101c	; 0x101c <__floatsisf>
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	48 ec       	ldi	r20, 0xC8	; 200
     a5e:	52 e4       	ldi	r21, 0x42	; 66
     a60:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divsf3>
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	40 e2       	ldi	r20, 0x20	; 32
     a6a:	51 e4       	ldi	r21, 0x41	; 65
     a6c:	0e 94 9a 08 	call	0x1134	; 0x1134 <__mulsf3>
     a70:	4b 01       	movw	r8, r22
     a72:	5c 01       	movw	r10, r24
								dutycycleValue = ( ( (Vr*2)/10 ) *Vt)/10;
     a74:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a78:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     a7c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     a80:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     a84:	9b 01       	movw	r18, r22
     a86:	ac 01       	movw	r20, r24
     a88:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__addsf3>
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	40 e2       	ldi	r20, 0x20	; 32
     a92:	51 e4       	ldi	r21, 0x41	; 65
     a94:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divsf3>
     a98:	9b 01       	movw	r18, r22
     a9a:	ac 01       	movw	r20, r24
     a9c:	c5 01       	movw	r24, r10
     a9e:	b4 01       	movw	r22, r8
     aa0:	0e 94 9a 08 	call	0x1134	; 0x1134 <__mulsf3>
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e2       	ldi	r20, 0x20	; 32
     aaa:	51 e4       	ldi	r21, 0x41	; 65
     aac:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divsf3>
								timer_wave_phasecorrectPWM(dutycycleValue);
     ab0:	0e 94 c1 06 	call	0xd82	; 0xd82 <timer_wave_phasecorrectPWM>
					}
					else if (diffTemp>5){
						timerThreeMinFlag = 1;
						if (timerThreeMinCounter<=1800)
						{
							keypadFlag=1;
     ab4:	11 e0       	ldi	r17, 0x01	; 1
     ab6:	59 c0       	rjmp	.+178    	; 0xb6a <main+0x308>
								dutycycleValue = ( ( (Vr*2)/10 ) *Vt)/10;
								timer_wave_phasecorrectPWM(dutycycleValue);
							}
							else
							{
								Vt = ( (double)(setTempValue - currentTemp)/100 ) *10;
     ab8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentTemp>
     abc:	6f 2d       	mov	r22, r15
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	68 1b       	sub	r22, r24
     ac2:	71 09       	sbc	r23, r1
     ac4:	07 2e       	mov	r0, r23
     ac6:	00 0c       	add	r0, r0
     ac8:	88 0b       	sbc	r24, r24
     aca:	99 0b       	sbc	r25, r25
     acc:	0e 94 0e 08 	call	0x101c	; 0x101c <__floatsisf>
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	48 ec       	ldi	r20, 0xC8	; 200
     ad6:	52 e4       	ldi	r21, 0x42	; 66
     ad8:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divsf3>
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	40 e2       	ldi	r20, 0x20	; 32
     ae2:	51 e4       	ldi	r21, 0x41	; 65
     ae4:	0e 94 9a 08 	call	0x1134	; 0x1134 <__mulsf3>
     ae8:	4b 01       	movw	r8, r22
     aea:	5c 01       	movw	r10, r24
								dutycycleValue = ( ( (Vr*2.0)/10.0 ) *Vt)/10.0 ;
     aec:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     af0:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     af4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     af8:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     afc:	9b 01       	movw	r18, r22
     afe:	ac 01       	movw	r20, r24
     b00:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__addsf3>
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e2       	ldi	r20, 0x20	; 32
     b0a:	51 e4       	ldi	r21, 0x41	; 65
     b0c:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divsf3>
     b10:	9b 01       	movw	r18, r22
     b12:	ac 01       	movw	r20, r24
     b14:	c5 01       	movw	r24, r10
     b16:	b4 01       	movw	r22, r8
     b18:	0e 94 9a 08 	call	0x1134	; 0x1134 <__mulsf3>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e2       	ldi	r20, 0x20	; 32
     b22:	51 e4       	ldi	r21, 0x41	; 65
     b24:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divsf3>
								timer_wave_phasecorrectPWM(dutycycleValue);
     b28:	0e 94 c1 06 	call	0xd82	; 0xd82 <timer_wave_phasecorrectPWM>
					}
					else if (diffTemp>5){
						timerThreeMinFlag = 1;
						if (timerThreeMinCounter<=1800)
						{
							keypadFlag=1;
     b2c:	11 e0       	ldi	r17, 0x01	; 1
     b2e:	1d c0       	rjmp	.+58     	; 0xb6a <main+0x308>
								timer_wave_phasecorrectPWM(dutycycleValue);
							}
						} 
						else
						{
							if (strcmp(systemState ,ERROR)!=0)
     b30:	6a eb       	ldi	r22, 0xBA	; 186
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	ce 01       	movw	r24, r28
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	0e 94 25 09 	call	0x124a	; 0x124a <strcmp>
     b3c:	89 2b       	or	r24, r25
     b3e:	a9 f0       	breq	.+42     	; 0xb6a <main+0x308>
							{
								//keypad off
								keypadFlag = 0;
								LCD_SetSystemState(ERROR);
     b40:	8a eb       	ldi	r24, 0xBA	; 186
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 54 03 	call	0x6a8	; 0x6a8 <LCD_SetSystemState>
								strcpy(systemState, ERROR);
     b48:	86 e0       	ldi	r24, 0x06	; 6
     b4a:	ea eb       	ldi	r30, 0xBA	; 186
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	de 01       	movw	r26, r28
     b50:	11 96       	adiw	r26, 0x01	; 1
     b52:	01 90       	ld	r0, Z+
     b54:	0d 92       	st	X+, r0
     b56:	8a 95       	dec	r24
     b58:	e1 f7       	brne	.-8      	; 0xb52 <main+0x2f0>
								timer2_overFlow_stop_interrupt();
     b5a:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <timer2_overFlow_stop_interrupt>
								dutycycleValue=0;
								timer_wave_phasecorrectPWM(dutycycleValue);
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	cb 01       	movw	r24, r22
     b64:	0e 94 c1 06 	call	0xd82	; 0xd82 <timer_wave_phasecorrectPWM>
						else
						{
							if (strcmp(systemState ,ERROR)!=0)
							{
								//keypad off
								keypadFlag = 0;
     b68:	10 e0       	ldi	r17, 0x00	; 0
						
						}
					}
				}
			
			uint8_t temp = keypadValue();
     b6a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <keypadValue>
     b6e:	08 2f       	mov	r16, r24
			if (temp == keypadNotPressed)
     b70:	8a 3f       	cpi	r24, 0xFA	; 250
     b72:	79 f0       	breq	.+30     	; 0xb92 <main+0x330>
			{	}
			else if(temp == KeypadStandBy){
     b74:	80 3f       	cpi	r24, 0xF0	; 240
     b76:	51 f4       	brne	.+20     	; 0xb8c <main+0x32a>
				LCD_StandbyScreen();
     b78:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_StandbyScreen>
				timer2_overFlow_stop_interrupt();
     b7c:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <timer2_overFlow_stop_interrupt>
				dutycycleValue=0;
				timer_wave_phasecorrectPWM(dutycycleValue);
     b80:	60 e0       	ldi	r22, 0x00	; 0
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	cb 01       	movw	r24, r22
     b86:	0e 94 c1 06 	call	0xd82	; 0xd82 <timer_wave_phasecorrectPWM>
     b8a:	97 ce       	rjmp	.-722    	; 0x8ba <main+0x58>
				//main();
				
			}
			else
			{ setTempValue = temp;
				LCD_SetSetTemp(setTempValue);
     b8c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <LCD_SetSetTemp>
				break;
				//main();
				
			}
			else
			{ setTempValue = temp;
     b90:	f0 2e       	mov	r15, r16
				LCD_SetSetTemp(setTempValue);
			}
			
			if (clearUnUsedTempCounter >= 200)
     b92:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <clearUnUsedTempCounter>
     b96:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <clearUnUsedTempCounter+0x1>
     b9a:	88 3c       	cpi	r24, 0xC8	; 200
     b9c:	91 05       	cpc	r25, r1
     b9e:	08 f4       	brcc	.+2      	; 0xba2 <main+0x340>
     ba0:	ad ce       	rjmp	.-678    	; 0x8fc <main+0x9a>
			{
				LCD_SetSetTemp(setTempValue);
     ba2:	8f 2d       	mov	r24, r15
     ba4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <LCD_SetSetTemp>
				for(uint8_t loop=0;loop<2;loop++){
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	06 c0       	rjmp	.+12     	; 0xbb8 <main+0x356>
					KeypadInput[loop]=0;
     bac:	e8 2f       	mov	r30, r24
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	e7 53       	subi	r30, 0x37	; 55
     bb2:	ff 4f       	sbci	r31, 0xFF	; 255
     bb4:	10 82       	st	Z, r1
			}
			
			if (clearUnUsedTempCounter >= 200)
			{
				LCD_SetSetTemp(setTempValue);
				for(uint8_t loop=0;loop<2;loop++){
     bb6:	8f 5f       	subi	r24, 0xFF	; 255
     bb8:	82 30       	cpi	r24, 0x02	; 2
     bba:	c0 f3       	brcs	.-16     	; 0xbac <main+0x34a>
					KeypadInput[loop]=0;
				}
				arrayIndex = 0;
     bbc:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <arrayIndex>
				clearUnUsedTempCounter=0;
     bc0:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <clearUnUsedTempCounter+0x1>
     bc4:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <clearUnUsedTempCounter>
				clearUnUsedTempFlag = 0;
     bc8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <clearUnUsedTempFlag>
     bcc:	97 ce       	rjmp	.-722    	; 0x8fc <main+0x9a>

00000bce <ADC_vinit>:

#include <avr/io.h>
#include "std_macros.h"
void ADC_vinit(void)
{
	SET_BIT(ADMUX,REFS0); //configure VREF
     bce:	87 b1       	in	r24, 0x07	; 7
     bd0:	80 64       	ori	r24, 0x40	; 64
     bd2:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,ADEN); // enable ADC
     bd4:	86 b1       	in	r24, 0x06	; 6
     bd6:	80 68       	ori	r24, 0x80	; 128
     bd8:	86 b9       	out	0x06, r24	; 6
	/* adjust ADC clock*/
	SET_BIT(ADCSRA,ADPS2);
     bda:	86 b1       	in	r24, 0x06	; 6
     bdc:	84 60       	ori	r24, 0x04	; 4
     bde:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS1);
     be0:	86 b1       	in	r24, 0x06	; 6
     be2:	82 60       	ori	r24, 0x02	; 2
     be4:	86 b9       	out	0x06, r24	; 6
     be6:	08 95       	ret

00000be8 <ADC_u16Read>:
}
double ADC_u16Read(void)
{
	unsigned short read_val;
	
	SET_BIT(ADCSRA,ADSC);
     be8:	86 b1       	in	r24, 0x06	; 6
     bea:	80 64       	ori	r24, 0x40	; 64
     bec:	86 b9       	out	0x06, r24	; 6
	while(IS_BIT_CLR(ADCSRA,ADIF));//stay in your position till ADIF become 1
     bee:	34 9b       	sbis	0x06, 4	; 6
     bf0:	fe cf       	rjmp	.-4      	; 0xbee <ADC_u16Read+0x6>
	SET_BIT(ADCSRA,ADIF); // clear ADIF
     bf2:	86 b1       	in	r24, 0x06	; 6
     bf4:	80 61       	ori	r24, 0x10	; 16
     bf6:	86 b9       	out	0x06, r24	; 6
	read_val=(ADCL);
     bf8:	84 b1       	in	r24, 0x04	; 4
	read_val|=(ADCH<<8);
     bfa:	65 b1       	in	r22, 0x05	; 5
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	76 2f       	mov	r23, r22
     c00:	66 27       	eor	r22, r22
     c02:	68 2b       	or	r22, r24
	//(x - 0) * (0 - 255) / (1 - 0) + 255;
	double return_val = ((double)read_val /(double)1023) *(double)5;
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 0c 08 	call	0x1018	; 0x1018 <__floatunsisf>
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 ec       	ldi	r19, 0xC0	; 192
     c10:	4f e7       	ldi	r20, 0x7F	; 127
     c12:	54 e4       	ldi	r21, 0x44	; 68
     c14:	0e 94 6b 07 	call	0xed6	; 0xed6 <__divsf3>
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 ea       	ldi	r20, 0xA0	; 160
     c1e:	50 e4       	ldi	r21, 0x40	; 64
     c20:	0e 94 9a 08 	call	0x1134	; 0x1134 <__mulsf3>
	return return_val ;
     c24:	08 95       	ret

00000c26 <DIO_vsetPINDir>:
void write_low_nibble(uint8_t portname,uint8_t value)
{
	value &= 0x0f;

	PORT_REG(portname) &= 0xf0;
	PORT_REG(portname) |= value;
     c26:	41 30       	cpi	r20, 0x01	; 1
     c28:	89 f4       	brne	.+34     	; 0xc4c <DIO_vsetPINDir+0x26>
     c2a:	e8 2f       	mov	r30, r24
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	e0 54       	subi	r30, 0x40	; 64
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	e0 81       	ld	r30, Z
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	22 91       	ld	r18, -Z
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <DIO_vsetPINDir+0x1c>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	6a 95       	dec	r22
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <DIO_vsetPINDir+0x18>
     c46:	82 2b       	or	r24, r18
     c48:	80 83       	st	Z, r24
     c4a:	08 95       	ret
     c4c:	e8 2f       	mov	r30, r24
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	e0 54       	subi	r30, 0x40	; 64
     c52:	ff 4f       	sbci	r31, 0xFF	; 255
     c54:	e0 81       	ld	r30, Z
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	22 91       	ld	r18, -Z
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <DIO_vsetPINDir+0x3e>
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	6a 95       	dec	r22
     c66:	e2 f7       	brpl	.-8      	; 0xc60 <DIO_vsetPINDir+0x3a>
     c68:	80 95       	com	r24
     c6a:	82 23       	and	r24, r18
     c6c:	80 83       	st	Z, r24
     c6e:	08 95       	ret

00000c70 <DIO_write>:
     c70:	41 30       	cpi	r20, 0x01	; 1
     c72:	89 f4       	brne	.+34     	; 0xc96 <DIO_write+0x26>
     c74:	e8 2f       	mov	r30, r24
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	e0 54       	subi	r30, 0x40	; 64
     c7a:	ff 4f       	sbci	r31, 0xFF	; 255
     c7c:	e0 81       	ld	r30, Z
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	20 81       	ld	r18, Z
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <DIO_write+0x1c>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	6a 95       	dec	r22
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <DIO_write+0x18>
     c90:	82 2b       	or	r24, r18
     c92:	80 83       	st	Z, r24
     c94:	08 95       	ret
     c96:	e8 2f       	mov	r30, r24
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	e0 54       	subi	r30, 0x40	; 64
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	e0 81       	ld	r30, Z
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	20 81       	ld	r18, Z
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <DIO_write+0x3e>
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	6a 95       	dec	r22
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <DIO_write+0x3a>
     cb2:	80 95       	com	r24
     cb4:	82 23       	and	r24, r18
     cb6:	80 83       	st	Z, r24
     cb8:	08 95       	ret

00000cba <DIO_u8read>:
     cba:	e8 2f       	mov	r30, r24
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	e0 54       	subi	r30, 0x40	; 64
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	e0 81       	ld	r30, Z
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	32 97       	sbiw	r30, 0x02	; 2
     cc8:	40 81       	ld	r20, Z
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	9c 01       	movw	r18, r24
     cd0:	06 2e       	mov	r0, r22
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_u8read+0x1e>
     cd4:	22 0f       	add	r18, r18
     cd6:	33 1f       	adc	r19, r19
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_u8read+0x1a>
     cdc:	84 2f       	mov	r24, r20
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	82 23       	and	r24, r18
     ce2:	93 23       	and	r25, r19
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <DIO_u8read+0x30>
     ce6:	95 95       	asr	r25
     ce8:	87 95       	ror	r24
     cea:	6a 95       	dec	r22
     cec:	e2 f7       	brpl	.-8      	; 0xce6 <DIO_u8read+0x2c>
     cee:	08 95       	ret

00000cf0 <DIO_vconnectpullup>:
     cf0:	41 30       	cpi	r20, 0x01	; 1
     cf2:	89 f4       	brne	.+34     	; 0xd16 <DIO_vconnectpullup+0x26>
     cf4:	e8 2f       	mov	r30, r24
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	e0 54       	subi	r30, 0x40	; 64
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	e0 81       	ld	r30, Z
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	20 81       	ld	r18, Z
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <DIO_vconnectpullup+0x1c>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	6a 95       	dec	r22
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <DIO_vconnectpullup+0x18>
     d10:	82 2b       	or	r24, r18
     d12:	80 83       	st	Z, r24
     d14:	08 95       	ret
     d16:	e8 2f       	mov	r30, r24
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	e0 54       	subi	r30, 0x40	; 64
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	e0 81       	ld	r30, Z
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	20 81       	ld	r18, Z
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 c0       	rjmp	.+4      	; 0xd2e <DIO_vconnectpullup+0x3e>
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	6a 95       	dec	r22
     d30:	e2 f7       	brpl	.-8      	; 0xd2a <DIO_vconnectpullup+0x3a>
     d32:	80 95       	com	r24
     d34:	82 23       	and	r24, r18
     d36:	80 83       	st	Z, r24
     d38:	08 95       	ret

00000d3a <write_high_nibble>:

}

void write_high_nibble(uint8_t portname,uint8_t value)
{
	value<<=4;
     d3a:	62 95       	swap	r22
     d3c:	60 7f       	andi	r22, 0xF0	; 240
	PORT_REG(portname) &= 0x0f;
     d3e:	e8 2f       	mov	r30, r24
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	e0 54       	subi	r30, 0x40	; 64
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	e0 81       	ld	r30, Z
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8f 70       	andi	r24, 0x0F	; 15
     d4e:	80 83       	st	Z, r24
	PORT_REG(portname) |= value;
     d50:	80 81       	ld	r24, Z
     d52:	68 2b       	or	r22, r24
     d54:	60 83       	st	Z, r22
     d56:	08 95       	ret

00000d58 <SPI_Init>:
#include "SPI.h"

/* SPI Initialization */
void SPI_Init(void)
{
	SPI_DDR |= ( (uint8_t)1 << MOSI ) | ( (uint8_t)1 << SCK ) | ( (uint8_t)1 << SS );
     d58:	87 b3       	in	r24, 0x17	; 23
     d5a:	80 6b       	ori	r24, 0xB0	; 176
     d5c:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(SPI_DDR, MISO);
     d5e:	87 b3       	in	r24, 0x17	; 23
     d60:	8f 7b       	andi	r24, 0xBF	; 191
     d62:	87 bb       	out	0x17, r24	; 23
	SPCR |= ( (uint8_t)1 << SPE ) | ( (uint8_t)1 << MSTR ) | ( (uint8_t)1 << SPR0 );
     d64:	8d b1       	in	r24, 0x0d	; 13
     d66:	81 65       	ori	r24, 0x51	; 81
     d68:	8d b9       	out	0x0d, r24	; 13
	SPSR &= ~((uint8_t)1 << SPI2X);     /* Disable speed doubler */
     d6a:	8e b1       	in	r24, 0x0e	; 14
     d6c:	8e 7f       	andi	r24, 0xFE	; 254
     d6e:	8e b9       	out	0x0e, r24	; 14
     d70:	08 95       	ret

00000d72 <SPI_Write>:
}

/* SPI write data */
void SPI_Write(uint8_t data)
{
	SPDR = data;
     d72:	8f b9       	out	0x0f, r24	; 15
	while((uint8_t)(!(SPSR & ((uint8_t)1 << SPIF))))
     d74:	77 9b       	sbis	0x0e, 7	; 14
     d76:	fe cf       	rjmp	.-4      	; 0xd74 <SPI_Write+0x2>
	{
		/* Wait till transmission complete */
	}
}
     d78:	08 95       	ret

00000d7a <SPI_Read>:

/* SPI read data */
uint8_t SPI_Read(void)
{
	while(!((uint8_t)SPSR & ((uint8_t)1 << (uint8_t)SPIF)))
     d7a:	77 9b       	sbis	0x0e, 7	; 14
     d7c:	fe cf       	rjmp	.-4      	; 0xd7a <SPI_Read>
	{
		/* Wait till reception complete */
	}
	return SPDR;
     d7e:	8f b1       	in	r24, 0x0f	; 15
}
     d80:	08 95       	ret

00000d82 <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(double x)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
     d82:	27 b3       	in	r18, 0x17	; 23
     d84:	28 60       	ori	r18, 0x08	; 8
     d86:	27 bb       	out	0x17, r18	; 23
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
     d88:	23 b7       	in	r18, 0x33	; 51
     d8a:	20 64       	ori	r18, 0x40	; 64
     d8c:	23 bf       	out	0x33, r18	; 51
	/* load a value in OCR0 */
	//OCR0=64;
	OCR0=(x - 0) * (0 - 255) / (1 - 0) + 255;
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	4f e7       	ldi	r20, 0x7F	; 127
     d94:	53 ec       	ldi	r21, 0xC3	; 195
     d96:	0e 94 9a 08 	call	0x1134	; 0x1134 <__mulsf3>
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	4f e7       	ldi	r20, 0x7F	; 127
     da0:	53 e4       	ldi	r21, 0x43	; 67
     da2:	0e 94 ff 06 	call	0xdfe	; 0xdfe <__addsf3>
     da6:	0e 94 dd 07 	call	0xfba	; 0xfba <__fixunssfsi>
     daa:	6c bf       	out	0x3c, r22	; 60
	//OCR0=(((Vr * 2)/10) * Vt) / 10.;
	/* select timer clock */
	CLR_BIT(TCCR0,CS00);
     dac:	83 b7       	in	r24, 0x33	; 51
     dae:	8e 7f       	andi	r24, 0xFE	; 254
     db0:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS01);
     db2:	83 b7       	in	r24, 0x33	; 51
     db4:	82 60       	ori	r24, 0x02	; 2
     db6:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS02);
     db8:	83 b7       	in	r24, 0x33	; 51
     dba:	8b 7f       	andi	r24, 0xFB	; 251
     dbc:	83 bf       	out	0x33, r24	; 51
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
     dbe:	83 b7       	in	r24, 0x33	; 51
     dc0:	80 61       	ori	r24, 0x10	; 16
     dc2:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
     dc4:	83 b7       	in	r24, 0x33	; 51
     dc6:	80 62       	ori	r24, 0x20	; 32
     dc8:	83 bf       	out	0x33, r24	; 51
     dca:	08 95       	ret

00000dcc <timer2_overFlow_init_interrupt>:
}
void timer2_overFlow_init_interrupt(void)
{
	/* select CTC mode*/
	CLR_BIT(TCCR2,WGM01);
     dcc:	85 b5       	in	r24, 0x25	; 37
     dce:	87 7f       	andi	r24, 0xF7	; 247
     dd0:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,WGM00);
     dd2:	85 b5       	in	r24, 0x25	; 37
     dd4:	8f 7b       	andi	r24, 0xBF	; 191
     dd6:	85 bd       	out	0x25, r24	; 37
	/* select timer clock */
	SET_BIT(TCCR2,CS00);
     dd8:	85 b5       	in	r24, 0x25	; 37
     dda:	81 60       	ori	r24, 0x01	; 1
     ddc:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS01);
     dde:	85 b5       	in	r24, 0x25	; 37
     de0:	82 60       	ori	r24, 0x02	; 2
     de2:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,CS02);
     de4:	85 b5       	in	r24, 0x25	; 37
     de6:	8b 7f       	andi	r24, 0xFB	; 251
     de8:	85 bd       	out	0x25, r24	; 37
	/* enable interrupt*/
	sei();
     dea:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);
     dec:	89 b7       	in	r24, 0x39	; 57
     dee:	80 64       	ori	r24, 0x40	; 64
     df0:	89 bf       	out	0x39, r24	; 57
     df2:	08 95       	ret

00000df4 <timer2_overFlow_stop_interrupt>:
}
void timer2_overFlow_stop_interrupt(void){
	CLR_BIT(TIMSK,TOIE2);
     df4:	89 b7       	in	r24, 0x39	; 57
     df6:	8f 7b       	andi	r24, 0xBF	; 191
     df8:	89 bf       	out	0x39, r24	; 57
     dfa:	08 95       	ret

00000dfc <__subsf3>:
     dfc:	50 58       	subi	r21, 0x80	; 128

00000dfe <__addsf3>:
     dfe:	bb 27       	eor	r27, r27
     e00:	aa 27       	eor	r26, r26
     e02:	0e 94 16 07 	call	0xe2c	; 0xe2c <__addsf3x>
     e06:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_round>
     e0a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fp_pscA>
     e0e:	38 f0       	brcs	.+14     	; 0xe1e <__addsf3+0x20>
     e10:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__fp_pscB>
     e14:	20 f0       	brcs	.+8      	; 0xe1e <__addsf3+0x20>
     e16:	39 f4       	brne	.+14     	; 0xe26 <__addsf3+0x28>
     e18:	9f 3f       	cpi	r25, 0xFF	; 255
     e1a:	19 f4       	brne	.+6      	; 0xe22 <__addsf3+0x24>
     e1c:	26 f4       	brtc	.+8      	; 0xe26 <__addsf3+0x28>
     e1e:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__fp_nan>
     e22:	0e f4       	brtc	.+2      	; 0xe26 <__addsf3+0x28>
     e24:	e0 95       	com	r30
     e26:	e7 fb       	bst	r30, 7
     e28:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_inf>

00000e2c <__addsf3x>:
     e2c:	e9 2f       	mov	r30, r25
     e2e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__fp_split3>
     e32:	58 f3       	brcs	.-42     	; 0xe0a <__addsf3+0xc>
     e34:	ba 17       	cp	r27, r26
     e36:	62 07       	cpc	r22, r18
     e38:	73 07       	cpc	r23, r19
     e3a:	84 07       	cpc	r24, r20
     e3c:	95 07       	cpc	r25, r21
     e3e:	20 f0       	brcs	.+8      	; 0xe48 <__addsf3x+0x1c>
     e40:	79 f4       	brne	.+30     	; 0xe60 <__addsf3x+0x34>
     e42:	a6 f5       	brtc	.+104    	; 0xeac <__addsf3x+0x80>
     e44:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__fp_zero>
     e48:	0e f4       	brtc	.+2      	; 0xe4c <__addsf3x+0x20>
     e4a:	e0 95       	com	r30
     e4c:	0b 2e       	mov	r0, r27
     e4e:	ba 2f       	mov	r27, r26
     e50:	a0 2d       	mov	r26, r0
     e52:	0b 01       	movw	r0, r22
     e54:	b9 01       	movw	r22, r18
     e56:	90 01       	movw	r18, r0
     e58:	0c 01       	movw	r0, r24
     e5a:	ca 01       	movw	r24, r20
     e5c:	a0 01       	movw	r20, r0
     e5e:	11 24       	eor	r1, r1
     e60:	ff 27       	eor	r31, r31
     e62:	59 1b       	sub	r21, r25
     e64:	99 f0       	breq	.+38     	; 0xe8c <__addsf3x+0x60>
     e66:	59 3f       	cpi	r21, 0xF9	; 249
     e68:	50 f4       	brcc	.+20     	; 0xe7e <__addsf3x+0x52>
     e6a:	50 3e       	cpi	r21, 0xE0	; 224
     e6c:	68 f1       	brcs	.+90     	; 0xec8 <__addsf3x+0x9c>
     e6e:	1a 16       	cp	r1, r26
     e70:	f0 40       	sbci	r31, 0x00	; 0
     e72:	a2 2f       	mov	r26, r18
     e74:	23 2f       	mov	r18, r19
     e76:	34 2f       	mov	r19, r20
     e78:	44 27       	eor	r20, r20
     e7a:	58 5f       	subi	r21, 0xF8	; 248
     e7c:	f3 cf       	rjmp	.-26     	; 0xe64 <__addsf3x+0x38>
     e7e:	46 95       	lsr	r20
     e80:	37 95       	ror	r19
     e82:	27 95       	ror	r18
     e84:	a7 95       	ror	r26
     e86:	f0 40       	sbci	r31, 0x00	; 0
     e88:	53 95       	inc	r21
     e8a:	c9 f7       	brne	.-14     	; 0xe7e <__addsf3x+0x52>
     e8c:	7e f4       	brtc	.+30     	; 0xeac <__addsf3x+0x80>
     e8e:	1f 16       	cp	r1, r31
     e90:	ba 0b       	sbc	r27, r26
     e92:	62 0b       	sbc	r22, r18
     e94:	73 0b       	sbc	r23, r19
     e96:	84 0b       	sbc	r24, r20
     e98:	ba f0       	brmi	.+46     	; 0xec8 <__addsf3x+0x9c>
     e9a:	91 50       	subi	r25, 0x01	; 1
     e9c:	a1 f0       	breq	.+40     	; 0xec6 <__addsf3x+0x9a>
     e9e:	ff 0f       	add	r31, r31
     ea0:	bb 1f       	adc	r27, r27
     ea2:	66 1f       	adc	r22, r22
     ea4:	77 1f       	adc	r23, r23
     ea6:	88 1f       	adc	r24, r24
     ea8:	c2 f7       	brpl	.-16     	; 0xe9a <__addsf3x+0x6e>
     eaa:	0e c0       	rjmp	.+28     	; 0xec8 <__addsf3x+0x9c>
     eac:	ba 0f       	add	r27, r26
     eae:	62 1f       	adc	r22, r18
     eb0:	73 1f       	adc	r23, r19
     eb2:	84 1f       	adc	r24, r20
     eb4:	48 f4       	brcc	.+18     	; 0xec8 <__addsf3x+0x9c>
     eb6:	87 95       	ror	r24
     eb8:	77 95       	ror	r23
     eba:	67 95       	ror	r22
     ebc:	b7 95       	ror	r27
     ebe:	f7 95       	ror	r31
     ec0:	9e 3f       	cpi	r25, 0xFE	; 254
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <__addsf3x+0x9a>
     ec4:	b0 cf       	rjmp	.-160    	; 0xe26 <__addsf3+0x28>
     ec6:	93 95       	inc	r25
     ec8:	88 0f       	add	r24, r24
     eca:	08 f0       	brcs	.+2      	; 0xece <__addsf3x+0xa2>
     ecc:	99 27       	eor	r25, r25
     ece:	ee 0f       	add	r30, r30
     ed0:	97 95       	ror	r25
     ed2:	87 95       	ror	r24
     ed4:	08 95       	ret

00000ed6 <__divsf3>:
     ed6:	0e 94 7f 07 	call	0xefe	; 0xefe <__divsf3x>
     eda:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_round>
     ede:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__fp_pscB>
     ee2:	58 f0       	brcs	.+22     	; 0xefa <__divsf3+0x24>
     ee4:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fp_pscA>
     ee8:	40 f0       	brcs	.+16     	; 0xefa <__divsf3+0x24>
     eea:	29 f4       	brne	.+10     	; 0xef6 <__divsf3+0x20>
     eec:	5f 3f       	cpi	r21, 0xFF	; 255
     eee:	29 f0       	breq	.+10     	; 0xefa <__divsf3+0x24>
     ef0:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_inf>
     ef4:	51 11       	cpse	r21, r1
     ef6:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_szero>
     efa:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__fp_nan>

00000efe <__divsf3x>:
     efe:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__fp_split3>
     f02:	68 f3       	brcs	.-38     	; 0xede <__divsf3+0x8>

00000f04 <__divsf3_pse>:
     f04:	99 23       	and	r25, r25
     f06:	b1 f3       	breq	.-20     	; 0xef4 <__divsf3+0x1e>
     f08:	55 23       	and	r21, r21
     f0a:	91 f3       	breq	.-28     	; 0xef0 <__divsf3+0x1a>
     f0c:	95 1b       	sub	r25, r21
     f0e:	55 0b       	sbc	r21, r21
     f10:	bb 27       	eor	r27, r27
     f12:	aa 27       	eor	r26, r26
     f14:	62 17       	cp	r22, r18
     f16:	73 07       	cpc	r23, r19
     f18:	84 07       	cpc	r24, r20
     f1a:	38 f0       	brcs	.+14     	; 0xf2a <__divsf3_pse+0x26>
     f1c:	9f 5f       	subi	r25, 0xFF	; 255
     f1e:	5f 4f       	sbci	r21, 0xFF	; 255
     f20:	22 0f       	add	r18, r18
     f22:	33 1f       	adc	r19, r19
     f24:	44 1f       	adc	r20, r20
     f26:	aa 1f       	adc	r26, r26
     f28:	a9 f3       	breq	.-22     	; 0xf14 <__divsf3_pse+0x10>
     f2a:	35 d0       	rcall	.+106    	; 0xf96 <__divsf3_pse+0x92>
     f2c:	0e 2e       	mov	r0, r30
     f2e:	3a f0       	brmi	.+14     	; 0xf3e <__divsf3_pse+0x3a>
     f30:	e0 e8       	ldi	r30, 0x80	; 128
     f32:	32 d0       	rcall	.+100    	; 0xf98 <__divsf3_pse+0x94>
     f34:	91 50       	subi	r25, 0x01	; 1
     f36:	50 40       	sbci	r21, 0x00	; 0
     f38:	e6 95       	lsr	r30
     f3a:	00 1c       	adc	r0, r0
     f3c:	ca f7       	brpl	.-14     	; 0xf30 <__divsf3_pse+0x2c>
     f3e:	2b d0       	rcall	.+86     	; 0xf96 <__divsf3_pse+0x92>
     f40:	fe 2f       	mov	r31, r30
     f42:	29 d0       	rcall	.+82     	; 0xf96 <__divsf3_pse+0x92>
     f44:	66 0f       	add	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	88 1f       	adc	r24, r24
     f4a:	bb 1f       	adc	r27, r27
     f4c:	26 17       	cp	r18, r22
     f4e:	37 07       	cpc	r19, r23
     f50:	48 07       	cpc	r20, r24
     f52:	ab 07       	cpc	r26, r27
     f54:	b0 e8       	ldi	r27, 0x80	; 128
     f56:	09 f0       	breq	.+2      	; 0xf5a <__divsf3_pse+0x56>
     f58:	bb 0b       	sbc	r27, r27
     f5a:	80 2d       	mov	r24, r0
     f5c:	bf 01       	movw	r22, r30
     f5e:	ff 27       	eor	r31, r31
     f60:	93 58       	subi	r25, 0x83	; 131
     f62:	5f 4f       	sbci	r21, 0xFF	; 255
     f64:	3a f0       	brmi	.+14     	; 0xf74 <__divsf3_pse+0x70>
     f66:	9e 3f       	cpi	r25, 0xFE	; 254
     f68:	51 05       	cpc	r21, r1
     f6a:	78 f0       	brcs	.+30     	; 0xf8a <__divsf3_pse+0x86>
     f6c:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_inf>
     f70:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_szero>
     f74:	5f 3f       	cpi	r21, 0xFF	; 255
     f76:	e4 f3       	brlt	.-8      	; 0xf70 <__divsf3_pse+0x6c>
     f78:	98 3e       	cpi	r25, 0xE8	; 232
     f7a:	d4 f3       	brlt	.-12     	; 0xf70 <__divsf3_pse+0x6c>
     f7c:	86 95       	lsr	r24
     f7e:	77 95       	ror	r23
     f80:	67 95       	ror	r22
     f82:	b7 95       	ror	r27
     f84:	f7 95       	ror	r31
     f86:	9f 5f       	subi	r25, 0xFF	; 255
     f88:	c9 f7       	brne	.-14     	; 0xf7c <__divsf3_pse+0x78>
     f8a:	88 0f       	add	r24, r24
     f8c:	91 1d       	adc	r25, r1
     f8e:	96 95       	lsr	r25
     f90:	87 95       	ror	r24
     f92:	97 f9       	bld	r25, 7
     f94:	08 95       	ret
     f96:	e1 e0       	ldi	r30, 0x01	; 1
     f98:	66 0f       	add	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	88 1f       	adc	r24, r24
     f9e:	bb 1f       	adc	r27, r27
     fa0:	62 17       	cp	r22, r18
     fa2:	73 07       	cpc	r23, r19
     fa4:	84 07       	cpc	r24, r20
     fa6:	ba 07       	cpc	r27, r26
     fa8:	20 f0       	brcs	.+8      	; 0xfb2 <__divsf3_pse+0xae>
     faa:	62 1b       	sub	r22, r18
     fac:	73 0b       	sbc	r23, r19
     fae:	84 0b       	sbc	r24, r20
     fb0:	ba 0b       	sbc	r27, r26
     fb2:	ee 1f       	adc	r30, r30
     fb4:	88 f7       	brcc	.-30     	; 0xf98 <__divsf3_pse+0x94>
     fb6:	e0 95       	com	r30
     fb8:	08 95       	ret

00000fba <__fixunssfsi>:
     fba:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__fp_splitA>
     fbe:	88 f0       	brcs	.+34     	; 0xfe2 <__fixunssfsi+0x28>
     fc0:	9f 57       	subi	r25, 0x7F	; 127
     fc2:	98 f0       	brcs	.+38     	; 0xfea <__fixunssfsi+0x30>
     fc4:	b9 2f       	mov	r27, r25
     fc6:	99 27       	eor	r25, r25
     fc8:	b7 51       	subi	r27, 0x17	; 23
     fca:	b0 f0       	brcs	.+44     	; 0xff8 <__fixunssfsi+0x3e>
     fcc:	e1 f0       	breq	.+56     	; 0x1006 <__fixunssfsi+0x4c>
     fce:	66 0f       	add	r22, r22
     fd0:	77 1f       	adc	r23, r23
     fd2:	88 1f       	adc	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	1a f0       	brmi	.+6      	; 0xfde <__fixunssfsi+0x24>
     fd8:	ba 95       	dec	r27
     fda:	c9 f7       	brne	.-14     	; 0xfce <__fixunssfsi+0x14>
     fdc:	14 c0       	rjmp	.+40     	; 0x1006 <__fixunssfsi+0x4c>
     fde:	b1 30       	cpi	r27, 0x01	; 1
     fe0:	91 f0       	breq	.+36     	; 0x1006 <__fixunssfsi+0x4c>
     fe2:	0e 94 93 08 	call	0x1126	; 0x1126 <__fp_zero>
     fe6:	b1 e0       	ldi	r27, 0x01	; 1
     fe8:	08 95       	ret
     fea:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__fp_zero>
     fee:	67 2f       	mov	r22, r23
     ff0:	78 2f       	mov	r23, r24
     ff2:	88 27       	eor	r24, r24
     ff4:	b8 5f       	subi	r27, 0xF8	; 248
     ff6:	39 f0       	breq	.+14     	; 0x1006 <__fixunssfsi+0x4c>
     ff8:	b9 3f       	cpi	r27, 0xF9	; 249
     ffa:	cc f3       	brlt	.-14     	; 0xfee <__fixunssfsi+0x34>
     ffc:	86 95       	lsr	r24
     ffe:	77 95       	ror	r23
    1000:	67 95       	ror	r22
    1002:	b3 95       	inc	r27
    1004:	d9 f7       	brne	.-10     	; 0xffc <__fixunssfsi+0x42>
    1006:	3e f4       	brtc	.+14     	; 0x1016 <__fixunssfsi+0x5c>
    1008:	90 95       	com	r25
    100a:	80 95       	com	r24
    100c:	70 95       	com	r23
    100e:	61 95       	neg	r22
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	8f 4f       	sbci	r24, 0xFF	; 255
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	08 95       	ret

00001018 <__floatunsisf>:
    1018:	e8 94       	clt
    101a:	09 c0       	rjmp	.+18     	; 0x102e <__floatsisf+0x12>

0000101c <__floatsisf>:
    101c:	97 fb       	bst	r25, 7
    101e:	3e f4       	brtc	.+14     	; 0x102e <__floatsisf+0x12>
    1020:	90 95       	com	r25
    1022:	80 95       	com	r24
    1024:	70 95       	com	r23
    1026:	61 95       	neg	r22
    1028:	7f 4f       	sbci	r23, 0xFF	; 255
    102a:	8f 4f       	sbci	r24, 0xFF	; 255
    102c:	9f 4f       	sbci	r25, 0xFF	; 255
    102e:	99 23       	and	r25, r25
    1030:	a9 f0       	breq	.+42     	; 0x105c <__floatsisf+0x40>
    1032:	f9 2f       	mov	r31, r25
    1034:	96 e9       	ldi	r25, 0x96	; 150
    1036:	bb 27       	eor	r27, r27
    1038:	93 95       	inc	r25
    103a:	f6 95       	lsr	r31
    103c:	87 95       	ror	r24
    103e:	77 95       	ror	r23
    1040:	67 95       	ror	r22
    1042:	b7 95       	ror	r27
    1044:	f1 11       	cpse	r31, r1
    1046:	f8 cf       	rjmp	.-16     	; 0x1038 <__floatsisf+0x1c>
    1048:	fa f4       	brpl	.+62     	; 0x1088 <__floatsisf+0x6c>
    104a:	bb 0f       	add	r27, r27
    104c:	11 f4       	brne	.+4      	; 0x1052 <__floatsisf+0x36>
    104e:	60 ff       	sbrs	r22, 0
    1050:	1b c0       	rjmp	.+54     	; 0x1088 <__floatsisf+0x6c>
    1052:	6f 5f       	subi	r22, 0xFF	; 255
    1054:	7f 4f       	sbci	r23, 0xFF	; 255
    1056:	8f 4f       	sbci	r24, 0xFF	; 255
    1058:	9f 4f       	sbci	r25, 0xFF	; 255
    105a:	16 c0       	rjmp	.+44     	; 0x1088 <__floatsisf+0x6c>
    105c:	88 23       	and	r24, r24
    105e:	11 f0       	breq	.+4      	; 0x1064 <__floatsisf+0x48>
    1060:	96 e9       	ldi	r25, 0x96	; 150
    1062:	11 c0       	rjmp	.+34     	; 0x1086 <__floatsisf+0x6a>
    1064:	77 23       	and	r23, r23
    1066:	21 f0       	breq	.+8      	; 0x1070 <__floatsisf+0x54>
    1068:	9e e8       	ldi	r25, 0x8E	; 142
    106a:	87 2f       	mov	r24, r23
    106c:	76 2f       	mov	r23, r22
    106e:	05 c0       	rjmp	.+10     	; 0x107a <__floatsisf+0x5e>
    1070:	66 23       	and	r22, r22
    1072:	71 f0       	breq	.+28     	; 0x1090 <__floatsisf+0x74>
    1074:	96 e8       	ldi	r25, 0x86	; 134
    1076:	86 2f       	mov	r24, r22
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	2a f0       	brmi	.+10     	; 0x1088 <__floatsisf+0x6c>
    107e:	9a 95       	dec	r25
    1080:	66 0f       	add	r22, r22
    1082:	77 1f       	adc	r23, r23
    1084:	88 1f       	adc	r24, r24
    1086:	da f7       	brpl	.-10     	; 0x107e <__floatsisf+0x62>
    1088:	88 0f       	add	r24, r24
    108a:	96 95       	lsr	r25
    108c:	87 95       	ror	r24
    108e:	97 f9       	bld	r25, 7
    1090:	08 95       	ret

00001092 <__fp_inf>:
    1092:	97 f9       	bld	r25, 7
    1094:	9f 67       	ori	r25, 0x7F	; 127
    1096:	80 e8       	ldi	r24, 0x80	; 128
    1098:	70 e0       	ldi	r23, 0x00	; 0
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	08 95       	ret

0000109e <__fp_nan>:
    109e:	9f ef       	ldi	r25, 0xFF	; 255
    10a0:	80 ec       	ldi	r24, 0xC0	; 192
    10a2:	08 95       	ret

000010a4 <__fp_pscA>:
    10a4:	00 24       	eor	r0, r0
    10a6:	0a 94       	dec	r0
    10a8:	16 16       	cp	r1, r22
    10aa:	17 06       	cpc	r1, r23
    10ac:	18 06       	cpc	r1, r24
    10ae:	09 06       	cpc	r0, r25
    10b0:	08 95       	ret

000010b2 <__fp_pscB>:
    10b2:	00 24       	eor	r0, r0
    10b4:	0a 94       	dec	r0
    10b6:	12 16       	cp	r1, r18
    10b8:	13 06       	cpc	r1, r19
    10ba:	14 06       	cpc	r1, r20
    10bc:	05 06       	cpc	r0, r21
    10be:	08 95       	ret

000010c0 <__fp_round>:
    10c0:	09 2e       	mov	r0, r25
    10c2:	03 94       	inc	r0
    10c4:	00 0c       	add	r0, r0
    10c6:	11 f4       	brne	.+4      	; 0x10cc <__fp_round+0xc>
    10c8:	88 23       	and	r24, r24
    10ca:	52 f0       	brmi	.+20     	; 0x10e0 <__fp_round+0x20>
    10cc:	bb 0f       	add	r27, r27
    10ce:	40 f4       	brcc	.+16     	; 0x10e0 <__fp_round+0x20>
    10d0:	bf 2b       	or	r27, r31
    10d2:	11 f4       	brne	.+4      	; 0x10d8 <__fp_round+0x18>
    10d4:	60 ff       	sbrs	r22, 0
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <__fp_round+0x20>
    10d8:	6f 5f       	subi	r22, 0xFF	; 255
    10da:	7f 4f       	sbci	r23, 0xFF	; 255
    10dc:	8f 4f       	sbci	r24, 0xFF	; 255
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	08 95       	ret

000010e2 <__fp_split3>:
    10e2:	57 fd       	sbrc	r21, 7
    10e4:	90 58       	subi	r25, 0x80	; 128
    10e6:	44 0f       	add	r20, r20
    10e8:	55 1f       	adc	r21, r21
    10ea:	59 f0       	breq	.+22     	; 0x1102 <__fp_splitA+0x10>
    10ec:	5f 3f       	cpi	r21, 0xFF	; 255
    10ee:	71 f0       	breq	.+28     	; 0x110c <__fp_splitA+0x1a>
    10f0:	47 95       	ror	r20

000010f2 <__fp_splitA>:
    10f2:	88 0f       	add	r24, r24
    10f4:	97 fb       	bst	r25, 7
    10f6:	99 1f       	adc	r25, r25
    10f8:	61 f0       	breq	.+24     	; 0x1112 <__fp_splitA+0x20>
    10fa:	9f 3f       	cpi	r25, 0xFF	; 255
    10fc:	79 f0       	breq	.+30     	; 0x111c <__fp_splitA+0x2a>
    10fe:	87 95       	ror	r24
    1100:	08 95       	ret
    1102:	12 16       	cp	r1, r18
    1104:	13 06       	cpc	r1, r19
    1106:	14 06       	cpc	r1, r20
    1108:	55 1f       	adc	r21, r21
    110a:	f2 cf       	rjmp	.-28     	; 0x10f0 <__fp_split3+0xe>
    110c:	46 95       	lsr	r20
    110e:	f1 df       	rcall	.-30     	; 0x10f2 <__fp_splitA>
    1110:	08 c0       	rjmp	.+16     	; 0x1122 <__fp_splitA+0x30>
    1112:	16 16       	cp	r1, r22
    1114:	17 06       	cpc	r1, r23
    1116:	18 06       	cpc	r1, r24
    1118:	99 1f       	adc	r25, r25
    111a:	f1 cf       	rjmp	.-30     	; 0x10fe <__fp_splitA+0xc>
    111c:	86 95       	lsr	r24
    111e:	71 05       	cpc	r23, r1
    1120:	61 05       	cpc	r22, r1
    1122:	08 94       	sec
    1124:	08 95       	ret

00001126 <__fp_zero>:
    1126:	e8 94       	clt

00001128 <__fp_szero>:
    1128:	bb 27       	eor	r27, r27
    112a:	66 27       	eor	r22, r22
    112c:	77 27       	eor	r23, r23
    112e:	cb 01       	movw	r24, r22
    1130:	97 f9       	bld	r25, 7
    1132:	08 95       	ret

00001134 <__mulsf3>:
    1134:	0e 94 ad 08 	call	0x115a	; 0x115a <__mulsf3x>
    1138:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__fp_round>
    113c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__fp_pscA>
    1140:	38 f0       	brcs	.+14     	; 0x1150 <__mulsf3+0x1c>
    1142:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__fp_pscB>
    1146:	20 f0       	brcs	.+8      	; 0x1150 <__mulsf3+0x1c>
    1148:	95 23       	and	r25, r21
    114a:	11 f0       	breq	.+4      	; 0x1150 <__mulsf3+0x1c>
    114c:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_inf>
    1150:	0c 94 4f 08 	jmp	0x109e	; 0x109e <__fp_nan>
    1154:	11 24       	eor	r1, r1
    1156:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_szero>

0000115a <__mulsf3x>:
    115a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__fp_split3>
    115e:	70 f3       	brcs	.-36     	; 0x113c <__mulsf3+0x8>

00001160 <__mulsf3_pse>:
    1160:	95 9f       	mul	r25, r21
    1162:	c1 f3       	breq	.-16     	; 0x1154 <__mulsf3+0x20>
    1164:	95 0f       	add	r25, r21
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	55 1f       	adc	r21, r21
    116a:	62 9f       	mul	r22, r18
    116c:	f0 01       	movw	r30, r0
    116e:	72 9f       	mul	r23, r18
    1170:	bb 27       	eor	r27, r27
    1172:	f0 0d       	add	r31, r0
    1174:	b1 1d       	adc	r27, r1
    1176:	63 9f       	mul	r22, r19
    1178:	aa 27       	eor	r26, r26
    117a:	f0 0d       	add	r31, r0
    117c:	b1 1d       	adc	r27, r1
    117e:	aa 1f       	adc	r26, r26
    1180:	64 9f       	mul	r22, r20
    1182:	66 27       	eor	r22, r22
    1184:	b0 0d       	add	r27, r0
    1186:	a1 1d       	adc	r26, r1
    1188:	66 1f       	adc	r22, r22
    118a:	82 9f       	mul	r24, r18
    118c:	22 27       	eor	r18, r18
    118e:	b0 0d       	add	r27, r0
    1190:	a1 1d       	adc	r26, r1
    1192:	62 1f       	adc	r22, r18
    1194:	73 9f       	mul	r23, r19
    1196:	b0 0d       	add	r27, r0
    1198:	a1 1d       	adc	r26, r1
    119a:	62 1f       	adc	r22, r18
    119c:	83 9f       	mul	r24, r19
    119e:	a0 0d       	add	r26, r0
    11a0:	61 1d       	adc	r22, r1
    11a2:	22 1f       	adc	r18, r18
    11a4:	74 9f       	mul	r23, r20
    11a6:	33 27       	eor	r19, r19
    11a8:	a0 0d       	add	r26, r0
    11aa:	61 1d       	adc	r22, r1
    11ac:	23 1f       	adc	r18, r19
    11ae:	84 9f       	mul	r24, r20
    11b0:	60 0d       	add	r22, r0
    11b2:	21 1d       	adc	r18, r1
    11b4:	82 2f       	mov	r24, r18
    11b6:	76 2f       	mov	r23, r22
    11b8:	6a 2f       	mov	r22, r26
    11ba:	11 24       	eor	r1, r1
    11bc:	9f 57       	subi	r25, 0x7F	; 127
    11be:	50 40       	sbci	r21, 0x00	; 0
    11c0:	9a f0       	brmi	.+38     	; 0x11e8 <__mulsf3_pse+0x88>
    11c2:	f1 f0       	breq	.+60     	; 0x1200 <__mulsf3_pse+0xa0>
    11c4:	88 23       	and	r24, r24
    11c6:	4a f0       	brmi	.+18     	; 0x11da <__mulsf3_pse+0x7a>
    11c8:	ee 0f       	add	r30, r30
    11ca:	ff 1f       	adc	r31, r31
    11cc:	bb 1f       	adc	r27, r27
    11ce:	66 1f       	adc	r22, r22
    11d0:	77 1f       	adc	r23, r23
    11d2:	88 1f       	adc	r24, r24
    11d4:	91 50       	subi	r25, 0x01	; 1
    11d6:	50 40       	sbci	r21, 0x00	; 0
    11d8:	a9 f7       	brne	.-22     	; 0x11c4 <__mulsf3_pse+0x64>
    11da:	9e 3f       	cpi	r25, 0xFE	; 254
    11dc:	51 05       	cpc	r21, r1
    11de:	80 f0       	brcs	.+32     	; 0x1200 <__mulsf3_pse+0xa0>
    11e0:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__fp_inf>
    11e4:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__fp_szero>
    11e8:	5f 3f       	cpi	r21, 0xFF	; 255
    11ea:	e4 f3       	brlt	.-8      	; 0x11e4 <__mulsf3_pse+0x84>
    11ec:	98 3e       	cpi	r25, 0xE8	; 232
    11ee:	d4 f3       	brlt	.-12     	; 0x11e4 <__mulsf3_pse+0x84>
    11f0:	86 95       	lsr	r24
    11f2:	77 95       	ror	r23
    11f4:	67 95       	ror	r22
    11f6:	b7 95       	ror	r27
    11f8:	f7 95       	ror	r31
    11fa:	e7 95       	ror	r30
    11fc:	9f 5f       	subi	r25, 0xFF	; 255
    11fe:	c1 f7       	brne	.-16     	; 0x11f0 <__mulsf3_pse+0x90>
    1200:	fe 2b       	or	r31, r30
    1202:	88 0f       	add	r24, r24
    1204:	91 1d       	adc	r25, r1
    1206:	96 95       	lsr	r25
    1208:	87 95       	ror	r24
    120a:	97 f9       	bld	r25, 7
    120c:	08 95       	ret

0000120e <atoi>:
    120e:	fc 01       	movw	r30, r24
    1210:	88 27       	eor	r24, r24
    1212:	99 27       	eor	r25, r25
    1214:	e8 94       	clt
    1216:	21 91       	ld	r18, Z+
    1218:	20 32       	cpi	r18, 0x20	; 32
    121a:	e9 f3       	breq	.-6      	; 0x1216 <atoi+0x8>
    121c:	29 30       	cpi	r18, 0x09	; 9
    121e:	10 f0       	brcs	.+4      	; 0x1224 <atoi+0x16>
    1220:	2e 30       	cpi	r18, 0x0E	; 14
    1222:	c8 f3       	brcs	.-14     	; 0x1216 <atoi+0x8>
    1224:	2b 32       	cpi	r18, 0x2B	; 43
    1226:	41 f0       	breq	.+16     	; 0x1238 <atoi+0x2a>
    1228:	2d 32       	cpi	r18, 0x2D	; 45
    122a:	39 f4       	brne	.+14     	; 0x123a <atoi+0x2c>
    122c:	68 94       	set
    122e:	04 c0       	rjmp	.+8      	; 0x1238 <atoi+0x2a>
    1230:	0e 94 39 09 	call	0x1272	; 0x1272 <__mulhi_const_10>
    1234:	82 0f       	add	r24, r18
    1236:	91 1d       	adc	r25, r1
    1238:	21 91       	ld	r18, Z+
    123a:	20 53       	subi	r18, 0x30	; 48
    123c:	2a 30       	cpi	r18, 0x0A	; 10
    123e:	c0 f3       	brcs	.-16     	; 0x1230 <atoi+0x22>
    1240:	1e f4       	brtc	.+6      	; 0x1248 <atoi+0x3a>
    1242:	90 95       	com	r25
    1244:	81 95       	neg	r24
    1246:	9f 4f       	sbci	r25, 0xFF	; 255
    1248:	08 95       	ret

0000124a <strcmp>:
    124a:	fb 01       	movw	r30, r22
    124c:	dc 01       	movw	r26, r24
    124e:	8d 91       	ld	r24, X+
    1250:	01 90       	ld	r0, Z+
    1252:	80 19       	sub	r24, r0
    1254:	01 10       	cpse	r0, r1
    1256:	d9 f3       	breq	.-10     	; 0x124e <strcmp+0x4>
    1258:	99 0b       	sbc	r25, r25
    125a:	08 95       	ret

0000125c <__itoa_ncheck>:
    125c:	bb 27       	eor	r27, r27
    125e:	4a 30       	cpi	r20, 0x0A	; 10
    1260:	31 f4       	brne	.+12     	; 0x126e <__itoa_ncheck+0x12>
    1262:	99 23       	and	r25, r25
    1264:	22 f4       	brpl	.+8      	; 0x126e <__itoa_ncheck+0x12>
    1266:	bd e2       	ldi	r27, 0x2D	; 45
    1268:	90 95       	com	r25
    126a:	81 95       	neg	r24
    126c:	9f 4f       	sbci	r25, 0xFF	; 255
    126e:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__utoa_common>

00001272 <__mulhi_const_10>:
    1272:	7a e0       	ldi	r23, 0x0A	; 10
    1274:	97 9f       	mul	r25, r23
    1276:	90 2d       	mov	r25, r0
    1278:	87 9f       	mul	r24, r23
    127a:	80 2d       	mov	r24, r0
    127c:	91 0d       	add	r25, r1
    127e:	11 24       	eor	r1, r1
    1280:	08 95       	ret

00001282 <__utoa_ncheck>:
    1282:	bb 27       	eor	r27, r27

00001284 <__utoa_common>:
    1284:	fb 01       	movw	r30, r22
    1286:	55 27       	eor	r21, r21
    1288:	aa 27       	eor	r26, r26
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	aa 1f       	adc	r26, r26
    1290:	a4 17       	cp	r26, r20
    1292:	10 f0       	brcs	.+4      	; 0x1298 <__utoa_common+0x14>
    1294:	a4 1b       	sub	r26, r20
    1296:	83 95       	inc	r24
    1298:	50 51       	subi	r21, 0x10	; 16
    129a:	b9 f7       	brne	.-18     	; 0x128a <__utoa_common+0x6>
    129c:	a0 5d       	subi	r26, 0xD0	; 208
    129e:	aa 33       	cpi	r26, 0x3A	; 58
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <__utoa_common+0x20>
    12a2:	a9 5d       	subi	r26, 0xD9	; 217
    12a4:	a1 93       	st	Z+, r26
    12a6:	00 97       	sbiw	r24, 0x00	; 0
    12a8:	79 f7       	brne	.-34     	; 0x1288 <__utoa_common+0x4>
    12aa:	b1 11       	cpse	r27, r1
    12ac:	b1 93       	st	Z+, r27
    12ae:	11 92       	st	Z+, r1
    12b0:	cb 01       	movw	r24, r22
    12b2:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <strrev>

000012b6 <strrev>:
    12b6:	dc 01       	movw	r26, r24
    12b8:	fc 01       	movw	r30, r24
    12ba:	67 2f       	mov	r22, r23
    12bc:	71 91       	ld	r23, Z+
    12be:	77 23       	and	r23, r23
    12c0:	e1 f7       	brne	.-8      	; 0x12ba <strrev+0x4>
    12c2:	32 97       	sbiw	r30, 0x02	; 2
    12c4:	04 c0       	rjmp	.+8      	; 0x12ce <strrev+0x18>
    12c6:	7c 91       	ld	r23, X
    12c8:	6d 93       	st	X+, r22
    12ca:	70 83       	st	Z, r23
    12cc:	62 91       	ld	r22, -Z
    12ce:	ae 17       	cp	r26, r30
    12d0:	bf 07       	cpc	r27, r31
    12d2:	c8 f3       	brcs	.-14     	; 0x12c6 <strrev+0x10>
    12d4:	08 95       	ret

000012d6 <_exit>:
    12d6:	f8 94       	cli

000012d8 <__stop_program>:
    12d8:	ff cf       	rjmp	.-2      	; 0x12d8 <__stop_program>
